Index: work/db/scripts/arizona/data.sql
===================================================================
--- work/db/scripts/arizona/data.sql	(revision 2238)
+++ work/db/scripts/arizona/data.sql	(revision 2244)
@@ -14,4 +14,63 @@
 VALUES ('KFS-FP', 'GeneralErrorCorrection', 'EFFORT_CERTIFICATION_DEFAULT_OVERRIDE_BY_SUB_FUND', SYS_GUID(), 1, '30=FEDSUB', 'Specific sub-fund groups that are excepted from the DEFAULT_NUMBER_OF_DAYS_ERROR_CERTIFICATION_TAB_REQUIRED parameter. If the account used on the TO side includes sub-funds specified in this parameter, the number of days associated with the subfund should be used instead of the default to determine whether or not the Error Certification tab is required. Format of list is number of days 1=sub fund 1, sub fund 2; number of days 2= sub fund 3, sub fund 4.', 'VALID', 'A');
 
 INSERT INTO KRNS_PARM_T (NMSPC_CD, PARM_DTL_TYP_CD, PARM_NM, OBJ_ID, VER_NBR, TXT, PARM_DESC_TXT, PARM_TYP_CD, CONS_CD)
-VALUES ('KFS-FP', 'GeneralErrorCorrection', 'REFERENCE_NUMBER_VALIDATION_IND', SYS_GUID(), 1, 'Y', 'Indicator to turn the reference number validation on/off on the General Error Correction.', 'CONFG', 'A');
\ No newline at end of file
+VALUES ('KFS-FP', 'GeneralErrorCorrection', 'REFERENCE_NUMBER_VALIDATION_IND', SYS_GUID(), 1, 'Y', 'Indicator to turn the reference number validation on/off on the General Error Correction.', 'CONFG', 'A');
+
+--Procurement Cardholder Maintenance document permissions SQL
+--Creates test reconcilers group
+INSERT INTO KRIM_GRP_T (GRP_ID,OBJ_ID,VER_NBR,GRP_NM,NMSPC_CD,GRP_DESC,KIM_TYP_ID,ACTV_IND,LAST_UPDT_DT) 
+VALUES ('1','2816E87B-3781-DF03-268A-A6E6314F8F1F',1,'PCARD_RECONCILERS_TEST_A','KFS-FP',null,'1','Y',{d '2009-05-07'});
+
+--Creates permisssion to administer routing (currently none, so maybe this permission isn't needed)
+INSERT INTO KRIM_PERM_T (PERM_ID,OBJ_ID,VER_NBR,PERM_TMPL_ID,NM,DESC_TXT,ACTV_IND,NMSPC_CD) VALUES ('1028','5B4F097448FCEF33E0504F8189D84F24',1,'3','Administer Routing for Document',null,'Y','KFS-FP');
+--Associates permission with document - perm_id must match perm_id above
+INSERT INTO KRIM_PERM_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,PERM_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1032','5B4F097449CCEF33E0504F8189D84F24',2,'1028','3','13','PCDH');
+
+--Creates permission to initiate page
+INSERT INTO KRIM_PERM_T (PERM_ID,OBJ_ID,VER_NBR,PERM_TMPL_ID,NM,DESC_TXT,ACTV_IND,NMSPC_CD) VALUES ('1029','5B4F097450FDEF33E0404F8189D84F24',1,'10','Initiate Document',null,'Y','KFS-FP');
+--Associates permission with document - perm_id must match perm_id above
+INSERT INTO KRIM_PERM_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,PERM_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1033','5B4F097450FDEF33E0404F8189D84F24',2,'1029','3','13','PCDH');
+
+--Creates permission for full unmask of credit card number
+INSERT INTO KRIM_PERM_T (PERM_ID,OBJ_ID,VER_NBR,PERM_TMPL_ID,NM,DESC_TXT,ACTV_IND,NMSPC_CD) VALUES ('1030','5B4F09744901EF33E0404F8130D84F24',1,'27','Full Unmask Field',null,'Y','KFS-FP');
+--Associates permission with component and property (bo and property) - perm_id must match perm_id above
+INSERT INTO KRIM_PERM_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,PERM_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1034','5B4F097449D1EF33E0404F8134D84F24',1,'1030','11','5','ProcurementCardHolderDetail');
+INSERT INTO KRIM_PERM_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,PERM_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1035','5B4F097449D2EF33E0404F8135D84F24',1,'1030','11','6','creditCardNumber');
+
+--Creates role...
+INSERT INTO KRIM_ROLE_T (ROLE_ID,OBJ_ID,VER_NBR,ROLE_NM,NMSPC_CD,DESC_TXT,KIM_TYP_ID,ACTV_IND,LAST_UPDT_DT) VALUES ('1002','08FBFB85-A98A-74F1-D57F-8FDB0AC0EE17',1,'28','KFS-FP',null,'17','Y',{d '2009-05-11'});
+--Associates permissions with role - role_id and perm_id must match role_id and perm_id above
+INSERT INTO KRIM_ROLE_PERM_T (ROLE_PERM_ID,OBJ_ID,VER_NBR,ROLE_ID,PERM_ID,ACTV_IND) VALUES ('1028','5C27A267EF097417E0404F8128D830A9',1,'1002','1028','Y');
+INSERT INTO KRIM_ROLE_PERM_T (ROLE_PERM_ID,OBJ_ID,VER_NBR,ROLE_ID,PERM_ID,ACTV_IND) VALUES ('1029','5C27A267EF097417E0404F8129D830A9',1,'1002','1029','Y');
+INSERT INTO KRIM_ROLE_PERM_T (ROLE_PERM_ID,OBJ_ID,VER_NBR,ROLE_ID,PERM_ID,ACTV_IND) VALUES ('1030','2F760D17-CC59-6B3F-AED3-61F7BF30F04C',1,'1002','1030','Y');
+
+--Procurement Card transactional document derived roles SQL
+--Creates the KIM types
+INSERT INTO KRIM_TYP_T (KIM_TYP_ID,OBJ_ID,VER_NBR,NM,SRVC_NM,ACTV_IND,NMSPC_CD) VALUES ('69','62FF3D2EAB2D54D5E0414F8189D879AE',1,'Derived Role: Procurement Cardholder','procurementCardHolderDerivedRoleTypeService','Y','KFS-FP');
+INSERT INTO KRIM_TYP_T (KIM_TYP_ID,OBJ_ID,VER_NBR,NM,SRVC_NM,ACTV_IND,NMSPC_CD) VALUES ('70','62FF3D2EAB2D54D5E0424F8189D879AE',1,'Derived Role: Procurement Card Reconciler','procurementCardReconcilerDerivedRoleTypeService','Y','KFS-FP'); 
+
+--Creates the roles
+INSERT INTO KRIM_ROLE_T (ROLE_ID,OBJ_ID,VER_NBR,ROLE_NM,NMSPC_CD,DESC_TXT,KIM_TYP_ID,ACTV_IND,LAST_UPDT_DT) VALUES ('98','62FF3D2EAB2E54D5E0484F8189D879AE',1,'Procurement Cardholder','KFS-FP',null,'69','Y',{d '2009-05-18'});
+INSERT INTO KRIM_ROLE_T (ROLE_ID,OBJ_ID,VER_NBR,ROLE_NM,NMSPC_CD,DESC_TXT,KIM_TYP_ID,ACTV_IND,LAST_UPDT_DT) VALUES ('99','62FF3D2EAB2E54D5E0494F8189D879AE',1,'Procurement Card Reconciler','KFS-FP',null,'70','Y',{d '2009-05-18'});
+
+--Creates the responsibilities
+INSERT INTO KRIM_RSP_T (RSP_ID,OBJ_ID,VER_NBR,RSP_TMPL_ID,NM,DESC_TXT,ACTV_IND,NMSPC_CD) VALUES ('90','6088196F508AAF50E0404F8190D80163',1,'1','Review',null,'Y','KFS-FP');
+INSERT INTO KRIM_RSP_T (RSP_ID,OBJ_ID,VER_NBR,RSP_TMPL_ID,NM,DESC_TXT,ACTV_IND,NMSPC_CD) VALUES ('98','6088196F508AAF50E0404F8198D80163',1,'1','Review',null,'Y','KFS-FP');
+
+--Creates the responsibilities attributes
+INSERT INTO KRIM_RSP_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,RSP_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1016','62FF3D2EAB3054D5E0404F8116D879AE',1,'90','7','13','PCDO');
+INSERT INTO KRIM_RSP_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,RSP_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1017','62FF3D2EAB3154D5E0404F8117D879AE',1,'90','7','16','ProcurementCardholder');
+INSERT INTO KRIM_RSP_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,RSP_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1018','62FF3D2EAB3254D5E0404F8118D879AE',1,'90','7','40','true');
+INSERT INTO KRIM_RSP_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,RSP_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1019','62FF3D2EAB3354D5E0404F8119D879AE',1,'90','7','41','false'); 
+INSERT INTO KRIM_RSP_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,RSP_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1020','62FF3D2EAB3054D5E0404F8120D879AE',1,'98','7','13','PCDO');
+INSERT INTO KRIM_RSP_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,RSP_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1021','62FF3D2EAB3154D5E0404F8121D879AE',1,'98','7','16','ProcurementCardReconciler');
+INSERT INTO KRIM_RSP_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,RSP_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1022','62FF3D2EAB3254D5E0404F8122D879AE',1,'98','7','40','true');
+INSERT INTO KRIM_RSP_ATTR_DATA_T (ATTR_DATA_ID,OBJ_ID,VER_NBR,RSP_ID,KIM_TYP_ID,KIM_ATTR_DEFN_ID,ATTR_VAL) VALUES ('1023','62FF3D2EAB3354D5E0404F8123D879AE',1,'98','7','41','false'); 
+
+--Now link the roles and the responsibilities
+INSERT INTO KRIM_ROLE_RSP_T (ROLE_RSP_ID,OBJ_ID,VER_NBR,ROLE_ID,RSP_ID,ACTV_IND) VALUES ('1096','62FF3D2EAB3454D5E0404F8189D989AE',1,'98','90','Y');
+INSERT INTO KRIM_ROLE_RSP_T (ROLE_RSP_ID,OBJ_ID,VER_NBR,ROLE_ID,RSP_ID,ACTV_IND) VALUES ('1098','62FF3D2EAB3454D5E0404F8189D999AE',1,'99','98','Y');
+
+--Creates the roles/responsibilities actions
+INSERT INTO KRIM_ROLE_RSP_ACTN_T (ROLE_RSP_ACTN_ID,OBJ_ID,VER_NBR,ACTN_TYP_CD,PRIORITY_NBR,ACTN_PLCY_CD,ROLE_MBR_ID,ROLE_RSP_ID,FRC_ACTN) VALUES ('96','5D8B0E3E61FA96A3E0404F8196D8468D',1,'F',null,'F','*','1096','Y');
+INSERT INTO KRIM_ROLE_RSP_ACTN_T (ROLE_RSP_ACTN_ID,OBJ_ID,VER_NBR,ACTN_TYP_CD,PRIORITY_NBR,ACTN_PLCY_CD,ROLE_MBR_ID,ROLE_RSP_ID,FRC_ACTN) VALUES ('98','62FF3D2EAB3554D5E0404F8198D879AE',1,'A',null,'F','*','1098','N');
\ No newline at end of file
Index: work/src/edu/arizona/kfs/fp/batch/service/impl/ProcurementCardCreateDocumentServiceImpl.java
===================================================================
--- work/src/edu/arizona/kfs/fp/batch/service/impl/ProcurementCardCreateDocumentServiceImpl.java	(revision 0)
+++ work/src/edu/arizona/kfs/fp/batch/service/impl/ProcurementCardCreateDocumentServiceImpl.java	(revision 2244)
@@ -0,0 +1,843 @@
+/*
+ * Copyright 2006-2007 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.fp.batch.service.impl;
+
+import static org.kuali.kfs.fp.document.validation.impl.ProcurementCardDocumentRuleConstants.AUTO_APPROVE_DOCUMENTS_IND;
+import static org.kuali.kfs.fp.document.validation.impl.ProcurementCardDocumentRuleConstants.AUTO_APPROVE_NUMBER_OF_DAYS;
+import static org.kuali.kfs.fp.document.validation.impl.ProcurementCardDocumentRuleConstants.DEFAULT_TRANS_ACCOUNT_PARM_NM;
+import static org.kuali.kfs.fp.document.validation.impl.ProcurementCardDocumentRuleConstants.DEFAULT_TRANS_CHART_CODE_PARM_NM;
+import static org.kuali.kfs.fp.document.validation.impl.ProcurementCardDocumentRuleConstants.DEFAULT_TRANS_OBJECT_CODE_PARM_NM;
+import static org.kuali.kfs.fp.document.validation.impl.ProcurementCardDocumentRuleConstants.ERROR_TRANS_ACCOUNT_PARM_NM;
+import static org.kuali.kfs.fp.document.validation.impl.ProcurementCardDocumentRuleConstants.SINGLE_TRANSACTION_IND_PARM_NM;
+import static org.kuali.kfs.sys.KFSConstants.GL_CREDIT_CODE;
+
+import java.rmi.RemoteException;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.coa.businessobject.Account;
+import org.kuali.kfs.fp.batch.ProcurementCardAutoApproveDocumentsStep;
+import org.kuali.kfs.fp.batch.ProcurementCardCreateDocumentsStep;
+import org.kuali.kfs.fp.batch.ProcurementCardLoadStep;
+import org.kuali.kfs.fp.batch.service.ProcurementCardCreateDocumentService;
+import edu.arizona.kfs.fp.businessobject.ProcurementCardHolder;
+import edu.arizona.kfs.fp.businessobject.ProcurementCardHolderDetail;
+import org.kuali.kfs.fp.businessobject.ProcurementCardSourceAccountingLine;
+import org.kuali.kfs.fp.businessobject.ProcurementCardTargetAccountingLine;
+import org.kuali.kfs.fp.businessobject.ProcurementCardTransaction;
+import org.kuali.kfs.fp.businessobject.ProcurementCardTransactionDetail;
+import org.kuali.kfs.fp.businessobject.ProcurementCardVendor;
+import edu.arizona.kfs.fp.document.ProcurementCardDocument;
+import org.kuali.kfs.fp.document.validation.impl.ProcurementCardDocumentRuleConstants;
+import org.kuali.kfs.integration.cab.CapitalAssetBuilderModuleService;
+import org.kuali.kfs.sys.KFSPropertyConstants;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.sys.document.service.AccountingLineRuleHelperService;
+import org.kuali.kfs.sys.document.service.FinancialSystemDocumentService;
+import org.kuali.kfs.sys.document.validation.event.DocumentSystemSaveEvent;
+import org.kuali.rice.kew.dto.DocumentSearchCriteriaDTO;
+import org.kuali.rice.kew.dto.DocumentSearchResultDTO;
+import org.kuali.rice.kew.dto.DocumentSearchResultRowDTO;
+import org.kuali.rice.kew.dto.KeyValueDTO;
+import org.kuali.rice.kew.exception.WorkflowException;
+import org.kuali.rice.kew.util.KEWConstants;
+import org.kuali.rice.kns.bo.DocumentHeader;
+import org.kuali.rice.kns.service.BusinessObjectService;
+import org.kuali.rice.kns.service.DataDictionaryService;
+import org.kuali.rice.kns.service.DateTimeService;
+import org.kuali.rice.kns.service.ParameterService;
+import org.kuali.rice.kns.util.DateUtils;
+import org.kuali.rice.kns.util.ErrorMap;
+import org.kuali.rice.kns.util.GlobalVariables;
+import org.kuali.rice.kns.util.KualiDecimal;
+import org.kuali.rice.kns.util.ObjectUtils;
+import org.kuali.rice.kns.workflow.service.KualiWorkflowInfo;
+import org.kuali.rice.kns.workflow.service.WorkflowDocumentService;
+import org.springframework.transaction.annotation.Transactional;
+
+
+/**
+ * This is the default implementation of the ProcurementCardCreateDocumentService interface.
+ * 
+ * @see org.kuali.kfs.fp.batch.service.ProcurementCardCreateDocumentService
+ */
+@Transactional
+public class ProcurementCardCreateDocumentServiceImpl implements ProcurementCardCreateDocumentService {
+    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(ProcurementCardCreateDocumentServiceImpl.class);
+    
+    public static final String WORKFLOW_SEARCH_RESULT_KEY = "routeHeaderId";
+    
+    //hold the default values from the custom Procurement Cardholder table
+    private String cardholderName;
+    private String defaultChartCode;
+    private String defaultAccountNumber;
+    private String defaultObjectCode;
+
+    private ParameterService parameterService;
+    private BusinessObjectService businessObjectService;
+    private FinancialSystemDocumentService documentService;
+    private DataDictionaryService dataDictionaryService;
+    private DateTimeService dateTimeService;
+    private WorkflowDocumentService workflowDocumentService;
+    private AccountingLineRuleHelperService accountingLineRuleUtil;
+    private CapitalAssetBuilderModuleService capitalAssetBuilderModuleService;
+
+
+    /**
+     * This method retrieves a collection of credit card transactions and traverses through this list, creating 
+     * ProcurementCardDocuments for each card.
+     * 
+     * @return True if the procurement card documents were created successfully.  If any problem occur while creating the 
+     * documents, a runtime exception will be thrown.
+     * 
+     * @see org.kuali.kfs.fp.batch.service.ProcurementCardCreateDocumentService#createProcurementCardDocuments()
+     */
+    public boolean createProcurementCardDocuments() {
+        List documents = new ArrayList();
+        List cardTransactions = retrieveTransactions();
+
+        // iterate through card transaction list and create documents
+        for (Iterator iter = cardTransactions.iterator(); iter.hasNext();) {
+            documents.add(createProcurementCardDocument((List) iter.next()));
+        }
+
+        // now store all the documents
+        for (Iterator iter = documents.iterator(); iter.hasNext();) {
+            ProcurementCardDocument pcardDocument = (ProcurementCardDocument) iter.next();
+            try {
+                documentService.saveDocument(pcardDocument, DocumentSystemSaveEvent.class);
+                if ( LOG.isInfoEnabled() ) {
+                    LOG.info("Saved Procurement Card document: "+pcardDocument.getDocumentNumber());
+                }
+                // documentService.saveDocumentWithoutRunningValidation(pcardDocument);
+            }
+            catch (Exception e) {
+                LOG.error("Error persisting document # " + pcardDocument.getDocumentHeader().getDocumentNumber() + " " + e.getMessage(), e);
+                throw new RuntimeException("Error persisting document # " + pcardDocument.getDocumentHeader().getDocumentNumber() + " " + e.getMessage(),e);
+            }
+        }
+
+        return true;
+    }
+
+    /**
+     * This method retrieves all the procurement card documents with a status of 'I' and routes them to the next step in the
+     * routing path.
+     * 
+     * @return True if the routing was performed successfully.  A runtime exception will be thrown if any errors occur while routing.
+     * 
+     * @see org.kuali.kfs.fp.batch.service.ProcurementCardCreateDocumentService#routeProcurementCardDocuments(java.util.List)
+     */
+    public boolean routeProcurementCardDocuments() {
+        List<String> documentIdList = null;
+        try {
+            documentIdList = retrieveProcurementCardDocumentsToRoute(KEWConstants.ROUTE_HEADER_SAVED_CD);
+        } catch (WorkflowException e1) {
+            LOG.error("Error retrieving pcdo documents for routing: " + e1.getMessage(),e1);
+            throw new RuntimeException(e1.getMessage(),e1);
+        } catch (RemoteException re) {
+            LOG.error("Error retrieving pcdo documents for routing: " + re.getMessage(),re);
+            throw new RuntimeException(re.getMessage(),re);
+        }
+        
+        //Collections.reverse(documentIdList);
+        if ( LOG.isInfoEnabled() ) {
+            LOG.info("PCards to Route: "+documentIdList);
+        }
+        
+        for (String pcardDocumentId: documentIdList) {
+            try {
+                ProcurementCardDocument pcardDocument = (ProcurementCardDocument)documentService.getByDocumentHeaderId(pcardDocumentId);
+                if ( LOG.isInfoEnabled() ) {
+                    LOG.info("Routing PCDO document # " + pcardDocumentId + ".");
+                }
+                documentService.prepareWorkflowDocument(pcardDocument);
+
+                // calling workflow service to bypass business rule checks
+                workflowDocumentService.route(pcardDocument.getDocumentHeader().getWorkflowDocument(), "", null);
+            }
+            catch (WorkflowException e) {
+                LOG.error("Error routing document # " + pcardDocumentId + " " + e.getMessage());
+                throw new RuntimeException(e.getMessage(),e);
+            }
+        }
+
+        return true;
+    }
+    
+    /**
+     * Returns a list of all initiated but not yet routed procurement card documents, using the KualiWorkflowInfo service.
+     * @return a list of procurement card documents to route
+     */
+    private List<String> retrieveProcurementCardDocumentsToRoute(String statusCode) throws WorkflowException, RemoteException {
+        List<String> documentIds = new ArrayList<String>();
+        
+        DocumentSearchCriteriaDTO criteria = new DocumentSearchCriteriaDTO();
+        criteria.setDocTypeFullName(dataDictionaryService.getDocumentTypeNameByClass(ProcurementCardDocument.class));
+        criteria.setDocRouteStatus(statusCode);
+        DocumentSearchResultDTO results = SpringContext.getBean(KualiWorkflowInfo.class).performDocumentSearch(GlobalVariables.getUserSession().getPerson().getPrincipalId(), criteria);
+        
+        for (DocumentSearchResultRowDTO resultRow: results.getSearchResults()) {
+            for (KeyValueDTO field : resultRow.getFieldValues()) {
+                if (field.getKey().equals(WORKFLOW_SEARCH_RESULT_KEY)) {
+                    documentIds.add(parseDocumentIdFromRouteDocHeader(field.getValue()));
+                }
+            }
+        }
+        
+        return documentIds;
+    }
+    
+    /**
+     * Retrieves the document id out of the route document header
+     * @param routeDocHeader the String representing an HTML link to the document
+     * @return the document id
+     */
+    private String parseDocumentIdFromRouteDocHeader(String routeDocHeader) {
+        int rightBound = routeDocHeader.indexOf('>') + 1;
+        int leftBound = routeDocHeader.indexOf('<', rightBound);
+        return routeDocHeader.substring(rightBound, leftBound);
+    }
+
+    /**
+     * This method determines if procurement card documents can be auto approved.  A document can be auto approved if 
+     * the grace period for allowing auto approval of a procurement card document has passed.  The grace period is defined
+     * by a parameter in the parameters table.  The create date of the document is then compared against the current date and 
+     * if the difference is larger than the grace period defined, then the document is auto approved.
+     * 
+     * @return This method always returns true.
+     * 
+     * @see org.kuali.kfs.fp.batch.service.ProcurementCardCreateDocumentService#autoApproveProcurementCardDocuments()
+     */
+    public boolean autoApproveProcurementCardDocuments() {
+        // check if auto approve is turned on
+        boolean autoApproveOn = parameterService.getIndicatorParameter(ProcurementCardAutoApproveDocumentsStep.class, AUTO_APPROVE_DOCUMENTS_IND);
+
+        if (!autoApproveOn) { // no auto approve?  then skip out of here...
+            return true;
+        }
+
+        List<String> documentIdList = null;
+        try {
+            documentIdList = retrieveProcurementCardDocumentsToRoute(KEWConstants.ROUTE_HEADER_ENROUTE_CD);
+        }
+        catch (WorkflowException e1) {
+            throw new RuntimeException(e1.getMessage(),e1);
+        }
+        catch (RemoteException re) {
+            throw new RuntimeException(re.getMessage(),re);
+        }
+
+        // get number of days and type for auto approve
+        int autoApproveNumberDays = Integer.parseInt(parameterService.getParameterValue(ProcurementCardAutoApproveDocumentsStep.class, AUTO_APPROVE_NUMBER_OF_DAYS));
+
+        Timestamp currentDate = dateTimeService.getCurrentTimestamp();
+        for (String pcardDocumentId: documentIdList) {
+            try {
+                ProcurementCardDocument pcardDocument = (ProcurementCardDocument)documentService.getByDocumentHeaderId(pcardDocumentId);
+                
+                // prevent PCard documents from auto approving if they have capital asset info to collect
+                if(capitalAssetBuilderModuleService.hasCapitalAssetObjectSubType(pcardDocument)) {
+                    continue;
+                }
+
+                // if number of days in route is passed the allowed number, call doc service for super user approve
+                Timestamp docCreateDate = pcardDocument.getDocumentHeader().getWorkflowDocument().getCreateDate();
+                if (DateUtils.getDifferenceInDays(docCreateDate, currentDate) > autoApproveNumberDays) {
+                    // update document description to reflect the auto approval
+                    pcardDocument.getDocumentHeader().setDocumentDescription("Auto Approved On " + dateTimeService.toDateTimeString(currentDate) + ".");
+                
+                    if ( LOG.isInfoEnabled() ) {
+                        LOG.info("Auto approving document # " + pcardDocument.getDocumentHeader().getDocumentNumber());
+                    }
+                    documentService.superUserApproveDocument(pcardDocument, "");
+                }
+            } catch (WorkflowException e) {
+                LOG.error("Error auto approving document # " + pcardDocumentId + " " + e.getMessage(),e);
+                throw new RuntimeException(e.getMessage(),e);
+            }
+        }
+
+        return true;
+    }
+
+
+    /**
+     * This method retrieves a list of transactions from a temporary table, and groups them into document lists, based on 
+     * single transaction indicator or a grouping by card.
+     * 
+     * @return List containing transactions for document.
+     */
+    private List retrieveTransactions() {
+        List groupedTransactions = new ArrayList();
+
+        // retrieve records from transaction table order by card number
+        List transactions = (List) businessObjectService.findMatchingOrderBy(ProcurementCardTransaction.class, new HashMap(), KFSPropertyConstants.TRANSACTION_CREDIT_CARD_NUMBER, true);
+        
+        // check apc for single transaction documents or multiple by card
+        boolean singleTransaction = parameterService.getIndicatorParameter(ProcurementCardCreateDocumentsStep.class, SINGLE_TRANSACTION_IND_PARM_NM);
+
+        List documentTransactions = new ArrayList();
+        if (singleTransaction) {
+            for (Iterator iter = transactions.iterator(); iter.hasNext();) {
+                documentTransactions.add(iter.next());
+                groupedTransactions.add(documentTransactions);
+                documentTransactions = new ArrayList();
+            }
+        }
+        else {
+            Map cardTransactionsMap = new HashMap();
+            for (Iterator iter = transactions.iterator(); iter.hasNext();) {
+                ProcurementCardTransaction transaction = (ProcurementCardTransaction) iter.next();
+                if (!cardTransactionsMap.containsKey(transaction.getTransactionCreditCardNumber())) {
+                    cardTransactionsMap.put(transaction.getTransactionCreditCardNumber(), new ArrayList());
+                }
+                ((List) cardTransactionsMap.get(transaction.getTransactionCreditCardNumber())).add(transaction);
+            }
+
+            for (Iterator iter = cardTransactionsMap.values().iterator(); iter.hasNext();) {
+                groupedTransactions.add(iter.next());
+
+            }
+        }
+
+        return groupedTransactions;
+    }
+
+
+    /**
+     * Creates a ProcurementCardDocument from the List of transactions given.
+     * 
+     * @param transactions List of ProcurementCardTransaction objects to be used for creating the document.
+     * @return A ProcurementCardDocument populated with the transactions provided.
+     */
+    private ProcurementCardDocument createProcurementCardDocument(List transactions) {
+        ProcurementCardDocument pcardDocument = null;
+
+        try {
+            // get new document from doc service
+            pcardDocument = (ProcurementCardDocument) documentService.getNewDocument(ProcurementCardDocument.class);
+
+            // set the card holder record on the document from the first transaction
+            createCardHolderRecord(pcardDocument, (ProcurementCardTransaction) transactions.get(0));
+
+            // for each transaction, create transaction detail object and then acct lines for the detail
+            int transactionLineNumber = 1;
+            KualiDecimal documentTotalAmount = KualiDecimal.ZERO;
+            String errorText = "";
+            for (Iterator iter = transactions.iterator(); iter.hasNext();) {
+                ProcurementCardTransaction transaction = (ProcurementCardTransaction) iter.next();
+
+                // create transaction detail record with accounting lines
+                errorText += createTransactionDetailRecord(pcardDocument, transaction, transactionLineNumber);
+
+                // update document total
+                documentTotalAmount = documentTotalAmount.add(transaction.getFinancialDocumentTotalAmount());
+
+                transactionLineNumber++;
+            }
+            
+            pcardDocument.getDocumentHeader().setFinancialDocumentTotalAmount(documentTotalAmount);
+            pcardDocument.getDocumentHeader().setDocumentDescription(cardholderName);
+
+            // Remove duplicate messages from errorText
+            String messages[] = StringUtils.split(errorText, ".");
+            for (int i = 0; i < messages.length; i++) {
+                int countMatches = StringUtils.countMatches(errorText, messages[i]) - 1;
+                errorText = StringUtils.replace(errorText, messages[i] + ".", "", countMatches);
+            }
+            // In case errorText is still too long, truncate it and indicate so.
+            Integer documentExplanationMaxLength = dataDictionaryService.getAttributeMaxLength(DocumentHeader.class.getName(), KFSPropertyConstants.EXPLANATION);
+            if (documentExplanationMaxLength != null && errorText.length() > documentExplanationMaxLength.intValue()) {
+                String truncatedMessage = " ... TRUNCATED.";
+                errorText = errorText.substring(0, documentExplanationMaxLength - truncatedMessage.length()) + truncatedMessage;
+            }
+            pcardDocument.getDocumentHeader().setExplanation(errorText);
+        }
+        catch (WorkflowException e) {
+            LOG.error("Error creating pcdo documents: " + e.getMessage(),e);
+            throw new RuntimeException("Error creating pcdo documents: " + e.getMessage(),e);
+        }
+
+        return pcardDocument;
+    }
+
+    /**
+     * Creates card holder record and sets that record to the document given.
+     * 
+     * @param pcardDocument Procurement card document to place the record in.
+     * @param transaction The transaction to set the card holder record fields from.
+     */
+    private void createCardHolderRecord(ProcurementCardDocument pcardDocument, ProcurementCardTransaction transaction) {
+        ProcurementCardHolder cardHolder = new ProcurementCardHolder();
+
+        cardHolder.setDocumentNumber(pcardDocument.getDocumentNumber());
+        cardHolder.setAccountNumber(transaction.getAccountNumber());
+        cardHolder.setCardCycleAmountLimit(transaction.getCardCycleAmountLimit());
+        cardHolder.setCardCycleVolumeLimit(transaction.getCardCycleVolumeLimit());
+        cardHolder.setCardHolderAlternateName(transaction.getCardHolderAlternateName());
+        cardHolder.setCardHolderCityName(transaction.getCardHolderCityName());
+        cardHolder.setCardHolderLine1Address(transaction.getCardHolderLine1Address());
+        cardHolder.setCardHolderLine2Address(transaction.getCardHolderLine2Address());
+        cardHolder.setCardHolderName(transaction.getCardHolderName());
+        cardHolder.setCardHolderStateCode(transaction.getCardHolderStateCode());
+        cardHolder.setCardHolderWorkPhoneNumber(transaction.getCardHolderWorkPhoneNumber());
+        cardHolder.setCardHolderZipCode(transaction.getCardHolderZipCode());
+        cardHolder.setCardLimit(transaction.getCardLimit());
+        cardHolder.setCardNoteText(transaction.getCardNoteText());
+        cardHolder.setCardStatusCode(transaction.getCardStatusCode());
+        cardHolder.setChartOfAccountsCode(transaction.getChartOfAccountsCode());
+        cardHolder.setSubAccountNumber(transaction.getSubAccountNumber());
+        cardHolder.setTransactionCreditCardNumber(transaction.getTransactionCreditCardNumber());
+
+        pcardDocument.setProcurementCardHolder(cardHolder);        
+    }
+
+    /**
+     * Creates a transaction detail record and adds that record to the document provided.
+     * 
+     * @param pcardDocument Document to place record in.
+     * @param transaction Transaction to set fields from.
+     * @param transactionLineNumber Line number of the new transaction detail record within the procurement card document.
+     * @return The error text that was generated from the creation of the detail records.  If the text is empty, no errors were encountered.
+     */
+    private String createTransactionDetailRecord(ProcurementCardDocument pcardDocument, ProcurementCardTransaction transaction, Integer transactionLineNumber) {
+        ProcurementCardTransactionDetail transactionDetail = new ProcurementCardTransactionDetail();
+
+        // set the document transaction detail fields from the loaded transaction record
+        transactionDetail.setDocumentNumber(pcardDocument.getDocumentNumber());
+        transactionDetail.setFinancialDocumentTransactionLineNumber(transactionLineNumber);
+        transactionDetail.setTransactionDate(transaction.getTransactionDate());
+        transactionDetail.setTransactionReferenceNumber(transaction.getTransactionReferenceNumber());
+        transactionDetail.setTransactionBillingCurrencyCode(transaction.getTransactionBillingCurrencyCode());
+        transactionDetail.setTransactionCurrencyExchangeRate(transaction.getTransactionCurrencyExchangeRate());
+        transactionDetail.setTransactionDate(transaction.getTransactionDate());
+        transactionDetail.setTransactionOriginalCurrencyAmount(transaction.getTransactionOriginalCurrencyAmount());
+        transactionDetail.setTransactionOriginalCurrencyCode(transaction.getTransactionOriginalCurrencyCode());
+        transactionDetail.setTransactionPointOfSaleCode(transaction.getTransactionPointOfSaleCode());
+        transactionDetail.setTransactionPostingDate(transaction.getTransactionPostingDate());
+        transactionDetail.setTransactionPurchaseIdentifierDescription(transaction.getTransactionPurchaseIdentifierDescription());
+        transactionDetail.setTransactionPurchaseIdentifierIndicator(transaction.getTransactionPurchaseIdentifierIndicator());
+        transactionDetail.setTransactionSalesTaxAmount(transaction.getTransactionSalesTaxAmount());
+        transactionDetail.setTransactionSettlementAmount(transaction.getTransactionSettlementAmount());
+        transactionDetail.setTransactionTaxExemptIndicator(transaction.getTransactionTaxExemptIndicator());
+        transactionDetail.setTransactionTravelAuthorizationCode(transaction.getTransactionTravelAuthorizationCode());
+        transactionDetail.setTransactionUnitContactName(transaction.getTransactionUnitContactName());
+
+        if (GL_CREDIT_CODE.equals(transaction.getTransactionDebitCreditCode())) {
+            transactionDetail.setTransactionTotalAmount(transaction.getFinancialDocumentTotalAmount().negated());
+        }
+        else {
+            transactionDetail.setTransactionTotalAmount(transaction.getFinancialDocumentTotalAmount());
+        }
+
+        // create transaction vendor record
+        createTransactionVendorRecord(pcardDocument, transaction, transactionDetail);
+
+        // add transaction detail to document
+        pcardDocument.getTransactionEntries().add(transactionDetail);
+
+        // now create the initial source and target lines for this transaction
+        return createAndValidateAccountingLines(pcardDocument, transaction, transactionDetail);
+    }
+
+
+    /**
+     * Creates a transaction vendor detail record and adds it to the transaction detail.
+     * 
+     * @param pcardDocument The procurement card document to retrieve values from.
+     * @param transaction Transaction to set fields from.
+     * @param transactionDetail The transaction detail to set the vendor record on.
+     */
+    private void createTransactionVendorRecord(ProcurementCardDocument pcardDocument, ProcurementCardTransaction transaction, ProcurementCardTransactionDetail transactionDetail) {
+        ProcurementCardVendor transactionVendor = new ProcurementCardVendor();
+
+        transactionVendor.setDocumentNumber(pcardDocument.getDocumentNumber());
+        transactionVendor.setFinancialDocumentTransactionLineNumber(transactionDetail.getFinancialDocumentTransactionLineNumber());
+        transactionVendor.setTransactionMerchantCategoryCode(transaction.getTransactionMerchantCategoryCode());
+        transactionVendor.setVendorCityName(transaction.getVendorCityName());
+        transactionVendor.setVendorLine1Address(transaction.getVendorLine1Address());
+        transactionVendor.setVendorLine2Address(transaction.getVendorLine2Address());
+        transactionVendor.setVendorName(transaction.getVendorName());
+        transactionVendor.setVendorOrderNumber(transaction.getVendorOrderNumber());
+        transactionVendor.setVendorStateCode(transaction.getVendorStateCode());
+        transactionVendor.setVendorZipCode(transaction.getVendorZipCode());
+        transactionVendor.setVisaVendorIdentifier(transaction.getVisaVendorIdentifier());
+
+        transactionDetail.setProcurementCardVendor(transactionVendor);
+    }
+
+    /**
+     * From the transaction accounting attributes, creates source and target accounting lines. Attributes are validated first, and
+     * replaced with default and error values if needed. There will be 1 source and 1 target line generated.
+     * 
+     * @param pcardDocument The procurement card document to add the new accounting lines to.
+     * @param transaction The transaction to process into account lines.
+     * @param docTransactionDetail The transaction detail to create source and target accounting lines from.
+     * @return String containing any error messages.
+     */
+    private String createAndValidateAccountingLines(ProcurementCardDocument pcardDocument, ProcurementCardTransaction transaction, ProcurementCardTransactionDetail docTransactionDetail) {
+        //get default values from custom Procurement Cardholder table
+        getDefaultValues(transaction.getTransactionCreditCardNumber());
+        
+        // build source lines
+        ProcurementCardSourceAccountingLine sourceLine = createSourceAccountingLine(transaction, docTransactionDetail);
+        sourceLine.setPostingYear(pcardDocument.getPostingYear());
+
+        // add line to transaction through document since document contains the next sequence number fields
+        pcardDocument.addSourceAccountingLine(sourceLine);
+
+        // build target lines
+        ProcurementCardTargetAccountingLine targetLine = createTargetAccountingLine(transaction, docTransactionDetail);
+        targetLine.setPostingYear(pcardDocument.getPostingYear());
+        
+        // add line to transaction through document since document contains the next sequence number fields
+        pcardDocument.addTargetAccountingLine(targetLine);
+
+        return validateTargetAccountingLine(targetLine);
+    }
+
+    /**
+     * Creates the to record for the transaction. The chart of account attributes from the transaction are used to create 
+     * the accounting line.
+     * 
+     * @param transaction The transaction to pull information from to create the accounting line.
+     * @param docTransactionDetail The transaction detail to pull information from to populate the accounting line.
+     * @return The target accounting line fully populated with values from the parameters passed in. 
+     */
+    private ProcurementCardTargetAccountingLine createTargetAccountingLine(ProcurementCardTransaction transaction, ProcurementCardTransactionDetail docTransactionDetail) {
+        ProcurementCardTargetAccountingLine targetLine = new ProcurementCardTargetAccountingLine();
+
+        targetLine.setDocumentNumber(docTransactionDetail.getDocumentNumber());
+        targetLine.setFinancialDocumentTransactionLineNumber(docTransactionDetail.getFinancialDocumentTransactionLineNumber());
+        targetLine.setChartOfAccountsCode(transaction.getChartOfAccountsCode());
+        targetLine.setAccountNumber(transaction.getAccountNumber());
+        targetLine.setFinancialObjectCode(transaction.getFinancialObjectCode());
+        targetLine.setSubAccountNumber(transaction.getSubAccountNumber());
+        targetLine.setFinancialSubObjectCode(transaction.getFinancialSubObjectCode());
+        targetLine.setProjectCode(transaction.getProjectCode());
+
+        if (GL_CREDIT_CODE.equals(transaction.getTransactionDebitCreditCode())) {
+            targetLine.setAmount(transaction.getFinancialDocumentTotalAmount().negated());
+        }
+        else {
+            targetLine.setAmount(transaction.getFinancialDocumentTotalAmount());
+        }
+
+        return targetLine;
+    }
+
+    /**
+     * Creates the from record for the transaction. The clearing chart, account, and object code is used for creating the line.
+     * 
+     * @param transaction The transaction to pull information from to create the accounting line.
+     * @param docTransactionDetail The transaction detail to pull information from to populate the accounting line.
+     * @return The source accounting line fully populated with values from the parameters passed in.
+     */
+    private ProcurementCardSourceAccountingLine createSourceAccountingLine(ProcurementCardTransaction transaction, ProcurementCardTransactionDetail docTransactionDetail) {
+        ProcurementCardSourceAccountingLine sourceLine = new ProcurementCardSourceAccountingLine();
+
+        sourceLine.setDocumentNumber(docTransactionDetail.getDocumentNumber());
+        sourceLine.setFinancialDocumentTransactionLineNumber(docTransactionDetail.getFinancialDocumentTransactionLineNumber());
+        sourceLine.setChartOfAccountsCode(getDefaultChartCode());
+        sourceLine.setAccountNumber(getDefaultAccountNumber());
+        sourceLine.setFinancialObjectCode(getDefaultObjectCode());
+
+        if (GL_CREDIT_CODE.equals(transaction.getTransactionDebitCreditCode())) {
+            sourceLine.setAmount(transaction.getFinancialDocumentTotalAmount().negated());
+        }
+        else {
+            sourceLine.setAmount(transaction.getFinancialDocumentTotalAmount());
+        }
+
+        return sourceLine;
+    }
+
+    /**
+     * Validates the chart of account attributes for existence and active indicator. Will substitute for defined 
+     * default parameters or set fields to empty that if they have errors.
+     * 
+     * @param targetLine The target accounting line to be validated.
+     * @return String with error messages discovered during validation.  An empty string indicates no validation errors were found.
+     */
+    private String validateTargetAccountingLine(ProcurementCardTargetAccountingLine targetLine) {
+        String errorText = "";
+
+        targetLine.refresh();
+
+        if (!accountingLineRuleUtil.isValidObjectCode(targetLine.getObjectCode(), dataDictionaryService.getDataDictionary())) {
+            String tempErrorText = "Chart " + targetLine.getChartOfAccountsCode() + " Object Code " + targetLine.getFinancialObjectCode() + " is invalid; using default Object Code.";
+            if ( LOG.isInfoEnabled() ) {
+                LOG.info(tempErrorText);
+            }
+            errorText += " " + tempErrorText;
+
+            targetLine.setFinancialObjectCode(getDefaultObjectCode());
+        }
+
+        if (StringUtils.isNotBlank(targetLine.getSubAccountNumber()) && !accountingLineRuleUtil.isValidSubAccount(targetLine.getSubAccount(), dataDictionaryService.getDataDictionary())) {
+            String tempErrorText = "Chart " + targetLine.getChartOfAccountsCode() + " Account " + targetLine.getAccountNumber() + " Sub Account " + targetLine.getSubAccountNumber() + " is invalid; Setting Sub Account to blank.";
+            if ( LOG.isInfoEnabled() ) {
+                LOG.info(tempErrorText);
+            }
+            errorText += " " + tempErrorText;
+
+            targetLine.setSubAccountNumber("");
+        }
+
+        // refresh again since further checks depend on the above attributes (which could have changed)
+        targetLine.refresh();
+
+        if (StringUtils.isNotBlank(targetLine.getFinancialSubObjectCode()) && !accountingLineRuleUtil.isValidSubObjectCode(targetLine.getSubObjectCode(), dataDictionaryService.getDataDictionary())) {
+            String tempErrorText = "Chart " + targetLine.getChartOfAccountsCode() + " Account " + targetLine.getAccountNumber() + " Object Code " + targetLine.getFinancialObjectCode() + " Sub Object Code " + targetLine.getFinancialSubObjectCode() + " is invalid; setting Sub Object to blank.";
+            if ( LOG.isInfoEnabled() ) {
+                LOG.info(tempErrorText);
+            }
+            errorText += " " + tempErrorText;
+
+            targetLine.setFinancialSubObjectCode("");
+        }
+
+        if (StringUtils.isNotBlank(targetLine.getProjectCode()) && !accountingLineRuleUtil.isValidProjectCode(targetLine.getProject(), dataDictionaryService.getDataDictionary())) {
+            if ( LOG.isInfoEnabled() ) {
+                LOG.info("Project Code " + targetLine.getProjectCode() + " is invalid; setting to blank.");
+            }
+            errorText += " Project Code " + targetLine.getProjectCode() + " is invalid; setting to blank.";
+
+            targetLine.setProjectCode("");
+        }
+
+        if (!accountingLineRuleUtil.isValidAccount(targetLine.getAccount(), dataDictionaryService.getDataDictionary()) || targetLine.getAccount().isExpired()) {
+            String tempErrorText = "Chart " + targetLine.getChartOfAccountsCode() + " Account " + targetLine.getAccountNumber() + " is invalid; using error account.";
+            if ( LOG.isInfoEnabled() ) {
+                LOG.info(tempErrorText);
+            }
+            errorText += " " + tempErrorText;
+
+            targetLine.setChartOfAccountsCode(getErrorChartCode());
+            targetLine.setAccountNumber(getErrorAccountNumber());
+        }
+
+        targetLine.refresh();
+
+        // clear out GlobalVariable error map, since we have taken care of the errors
+        GlobalVariables.setErrorMap(new ErrorMap());
+
+        return errorText;
+    }
+
+    /**
+     * Retrieves the error chart code from the parameter table.
+     * @return The error chart code defined in the parameter table.
+     */
+    private String getErrorChartCode() {
+        return parameterService.getParameterValue(ProcurementCardCreateDocumentsStep.class, ProcurementCardDocumentRuleConstants.ERROR_TRANS_CHART_CODE_PARM_NM);
+    }
+
+    /**
+     * Retrieves the error account number from the parameter table.
+     * @return The error account number defined in the parameter table.
+     */
+    private String getErrorAccountNumber() {
+        return parameterService.getParameterValue(ProcurementCardCreateDocumentsStep.class, ERROR_TRANS_ACCOUNT_PARM_NM);
+    }
+    
+    /**
+     * Gets the default Chart Code, Account from the custom Procurement Cardholder table.
+     * 
+     */
+    private void getDefaultValues(String creditCardNumber) {
+                
+        Map<String, String> pkMap = new HashMap<String, String>();
+        pkMap.put("creditCardNumber", creditCardNumber);
+        ProcurementCardHolderDetail procurementCardHolderDetail = (ProcurementCardHolderDetail) businessObjectService.findByPrimaryKey(ProcurementCardHolderDetail.class, pkMap);
+        
+        if (ObjectUtils.isNotNull(procurementCardHolderDetail)) {
+            cardholderName = procurementCardHolderDetail.getCardHolderName();
+            defaultChartCode = procurementCardHolderDetail.getChartOfAccountsCode();
+            defaultAccountNumber = procurementCardHolderDetail.getAccountNumber();
+            defaultObjectCode = procurementCardHolderDetail.getFinancialObjectCode();
+        }  
+        
+    }
+
+    /**
+     * Retrieves the default chart code from the parameter table.
+     * @return The default chart code defined in the parameter table.
+     */
+    private String getDefaultChartCode() {
+        if (StringUtils.isNotEmpty(defaultChartCode)) {
+            return defaultChartCode;
+        }
+        else {
+            return parameterService.getParameterValue(ProcurementCardLoadStep.class, DEFAULT_TRANS_CHART_CODE_PARM_NM);
+        }
+    }
+
+    /**
+     * Retrieves the default account number from the parameter table.
+     * @return The default account number defined in the parameter table.
+     */
+    private String getDefaultAccountNumber() {
+        if (StringUtils.isNotEmpty(defaultAccountNumber)) {
+            return defaultAccountNumber;
+        }
+        else {
+            return parameterService.getParameterValue(ProcurementCardLoadStep.class, DEFAULT_TRANS_ACCOUNT_PARM_NM);
+        }
+    }
+
+    /**
+     * Retrieves the default object code from the parameter table.
+     * @return The default object code defined in the parameter table.
+     */
+    private String getDefaultObjectCode() {
+        if (StringUtils.isNotEmpty(defaultObjectCode)) {
+            return defaultObjectCode;
+        }
+        else {
+            return parameterService.getParameterValue(ProcurementCardLoadStep.class, DEFAULT_TRANS_OBJECT_CODE_PARM_NM);
+        }
+    }
+
+    /**
+     * Calls businessObjectService to remove all the procurement card transaction rows from the transaction load table.
+     */
+    private void cleanTransactionsTable() {
+        businessObjectService.deleteMatching(ProcurementCardTransaction.class, new HashMap());
+    }
+
+    /**
+     * Loads all the parsed XML transactions into the temp transaction table.
+     * 
+     * @param transactions List of ProcurementCardTransactions to load.
+     */
+    private void loadTransactions(List transactions) {
+        businessObjectService.save(transactions);
+    }
+
+    /**
+     * Sets the parameterService attribute.
+     * @param parameterService
+     */
+    public void setParameterService(ParameterService parameterService) {
+        this.parameterService = parameterService;
+    }
+
+    /**
+     * Gets the businessObjectService attribute.
+     * @return Returns the businessObjectService.
+     */
+    public BusinessObjectService getBusinessObjectService() {
+        return businessObjectService;
+    }
+
+    /**
+     * Sets the businessObjectService attribute.
+     * @param businessObjectService The businessObjectService to set.
+     */
+    public void setBusinessObjectService(BusinessObjectService businessObjectService) {
+        this.businessObjectService = businessObjectService;
+    }
+
+    /**
+     * Gets the documentService attribute.
+     * @return Returns the documentService.
+     */
+    public FinancialSystemDocumentService getDocumentService() {
+        return documentService;
+    }
+
+    /**
+     * Sets the documentService attribute.
+     * @param documentService The documentService to set.
+     */
+    public void setDocumentService(FinancialSystemDocumentService documentService) {
+        this.documentService = documentService;
+    }
+
+
+    /**
+     * Gets the dataDictionaryService attribute.
+     * @return Returns the dataDictionaryService.
+     */
+    public DataDictionaryService getDataDictionaryService() {
+        return dataDictionaryService;
+    }
+
+    /**
+     * Sets the dataDictionaryService attribute.
+     * @param dataDictionaryService dataDictionaryService to set.
+     */
+    public void setDataDictionaryService(DataDictionaryService dataDictionaryService) {
+        this.dataDictionaryService = dataDictionaryService;
+    }
+
+
+    /**
+     * Gets the dateTimeService attribute.
+     * @return Returns the dateTimeService.
+     */
+    public DateTimeService getDateTimeService() {
+        return dateTimeService;
+    }
+
+    /**
+     * Sets the dateTimeService attribute.
+     * @param dateTimeService The dateTimeService to set.
+     */
+    public void setDateTimeService(DateTimeService dateTimeService) {
+        this.dateTimeService = dateTimeService;
+    }
+
+    /**
+     * Gets the workflowDocumentService attribute.
+     * @return Returns the workflowDocumentService.
+     */
+    public WorkflowDocumentService getWorkflowDocumentService() {
+        return workflowDocumentService;
+    }
+
+    /**
+     * Sets the workflowDocumentService attribute value.
+     * @param workflowDocumentService The workflowDocumentService to set.
+     */
+    public void setWorkflowDocumentService(WorkflowDocumentService workflowDocumentService) {
+        this.workflowDocumentService = workflowDocumentService;
+    }
+
+    /**
+     * Sets the accountingLineRuleUtil attribute value.
+     * @param accountingLineRuleUtil The accountingLineRuleUtil to set.
+     */
+    public void setAccountingLineRuleUtil(AccountingLineRuleHelperService accountingLineRuleUtil) {
+        this.accountingLineRuleUtil = accountingLineRuleUtil;
+    }
+
+    /**
+     * Sets the capitalAssetBuilderModuleService attribute value.
+     * @param capitalAssetBuilderModuleService The capitalAssetBuilderModuleService to set.
+     */
+    public void setCapitalAssetBuilderModuleService(CapitalAssetBuilderModuleService capitalAssetBuilderModuleService) {
+        this.capitalAssetBuilderModuleService = capitalAssetBuilderModuleService;
+    }
+
+}

Property changes on: financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/batch/service/impl/ProcurementCardCreateDocumentServiceImpl.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: work/src/edu/arizona/kfs/fp/businessobject/datadictionary/ProcurementCardHolder.xml
===================================================================
--- work/src/edu/arizona/kfs/fp/businessobject/datadictionary/ProcurementCardHolder.xml	(revision 0)
+++ work/src/edu/arizona/kfs/fp/businessobject/datadictionary/ProcurementCardHolder.xml	(revision 2244)
@@ -0,0 +1,330 @@
+<beans xmlns="http://www.springframework.org/schema/beans"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xmlns:p="http://www.springframework.org/schema/p"
+    xmlns:dd="http://rice.kuali.org/dd"
+    xsi:schemaLocation="
+http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
+http://rice.kuali.org/dd http://rice.kuali.org/dd/dd.xsd">
+
+  <bean id="ProcurementCardHolder" parent="ProcurementCardHolder-parentBean" />
+
+  <bean id="ProcurementCardHolder-parentBean" abstract="true" parent="BusinessObjectEntry">
+    <property name="businessObjectClass" value="edu.arizona.kfs.fp.businessobject.ProcurementCardHolder" />
+    <property name="inquiryDefinition" >
+      <ref bean="ProcurementCardHolder-inquiryDefinition" />
+    </property>
+    <property name="objectLabel" value="Procurement Card Holder" />
+    <property name="attributes" >
+      <list>
+        <ref bean="ProcurementCardHolder-accountNumber" />
+        <ref bean="ProcurementCardHolder-cardCycleAmountLimit" />
+        <ref bean="ProcurementCardHolder-cardCycleVolumeLimit" />
+        <ref bean="ProcurementCardHolder-cardHolderAlternateName" />
+        <ref bean="ProcurementCardHolder-cardHolderCityName" />
+        <ref bean="ProcurementCardHolder-cardHolderLine1Address" />
+        <ref bean="ProcurementCardHolder-cardHolderLine2Address" />
+        <ref bean="ProcurementCardHolder-cardHolderName" />
+        <ref bean="ProcurementCardHolder-cardHolderStateCode" />
+        <ref bean="ProcurementCardHolder-cardHolderWorkPhoneNumber" />
+        <ref bean="ProcurementCardHolder-cardHolderZipCode" />
+        <ref bean="ProcurementCardHolder-cardLimit" />
+        <ref bean="ProcurementCardHolder-cardNoteText" />
+        <ref bean="ProcurementCardHolder-cardStatusCode" />
+        <ref bean="ProcurementCardHolder-chartOfAccountsCode" />
+        <ref bean="ProcurementCardHolder-documentNumber" />
+        <ref bean="ProcurementCardHolder-subAccountNumber" />
+        <ref bean="ProcurementCardHolder-transactionCreditCardNumber" />
+      </list>
+    </property>
+    <property name="relationships" >
+      <list>       
+        <dd:relationship objectAttribute="procurementCardHolderDetail">
+            <dd:primitiveAttribute source="transactionCreditCardNumber" target="creditCardNumber" />  
+            <dd:supportAttribute source="procurementCardHolderDetail.cardHolderSystemId" target="cardHolderSystemId" /> 
+            <dd:supportAttribute source="procurementCardHolderDetail.cardGroupId" target="cardGroupId" />                              
+        </dd:relationship>            
+      </list>
+    </property>
+  </bean>
+
+<!-- Attribute Definitions -->
+
+
+  <bean id="ProcurementCardHolder-accountNumber" parent="ProcurementCardHolder-accountNumber-parentBean" />
+
+  <bean id="ProcurementCardHolder-accountNumber-parentBean" abstract="true" parent="Account-accountNumber">
+    <property name="label" value="Default Account" />
+    <property name="shortLabel" value="Dflt Acct" />
+  </bean>
+  <bean id="ProcurementCardHolder-cardCycleAmountLimit" parent="ProcurementCardHolder-cardCycleAmountLimit-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardCycleAmountLimit-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardCycleAmountLimit" />
+    <property name="forceUppercase" value="true" />
+    <property name="label" value="Card Cycle Amount Limit" />
+    <property name="shortLabel" value="Limit" />
+    <property name="maxLength" value="19" />
+    <property name="validationPattern" >
+      <bean parent="FloatingPointValidationPattern" />
+    </property>
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="21" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardCycleVolumeLimit" parent="ProcurementCardHolder-cardCycleVolumeLimit-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardCycleVolumeLimit-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardCycleVolumeLimit" />
+    <property name="forceUppercase" value="true" />
+    <property name="label" value="Card Cycle Volume Limit" />
+    <property name="shortLabel" value="Limit" />
+    <property name="maxLength" value="19" />
+    <property name="validationPattern" >
+      <bean parent="FloatingPointValidationPattern" />
+    </property>
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="21" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardHolderAlternateName" parent="ProcurementCardHolder-cardHolderAlternateName-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardHolderAlternateName-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardHolderAlternateName" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Card Holder Alternate Name" />
+    <property name="shortLabel" value="Name" />
+    <property name="maxLength" value="45" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="47" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardHolderCityName" parent="ProcurementCardHolder-cardHolderCityName-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardHolderCityName-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardHolderCityName" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Card Holder City Name" />
+    <property name="shortLabel" value="Name" />
+    <property name="maxLength" value="45" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="47" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardHolderLine1Address" parent="ProcurementCardHolder-cardHolderLine1Address-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardHolderLine1Address-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardHolderLine1Address" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Card Holder Line1 Address" />
+    <property name="shortLabel" value="Address" />
+    <property name="maxLength" value="45" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="47" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardHolderLine2Address" parent="ProcurementCardHolder-cardHolderLine2Address-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardHolderLine2Address-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardHolderLine2Address" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Card Holder Line2 Address" />
+    <property name="shortLabel" value="Address" />
+    <property name="maxLength" value="45" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="47" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardHolderName" parent="ProcurementCardHolder-cardHolderName-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardHolderName-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardHolderName" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Card Holder Name" />
+    <property name="shortLabel" value="Name" />
+    <property name="maxLength" value="35" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="37" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardHolderStateCode" parent="ProcurementCardHolder-cardHolderStateCode-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardHolderStateCode-parentBean" abstract="true" parent="ExternalizableAttributeDefinitionProxy"
+  	p:sourceExternalizableBusinessObjectInterface="org.kuali.rice.kns.bo.State"
+	p:sourceAttributeName="postalStateCode">
+    <property name="name" value="cardHolderStateCode" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Card Holder State Code" />
+    <property name="shortLabel" value="Code" />
+    <property name="maxLength" value="2" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="4" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardHolderWorkPhoneNumber" parent="ProcurementCardHolder-cardHolderWorkPhoneNumber-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardHolderWorkPhoneNumber-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardHolderWorkPhoneNumber" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Card Holder Work Phone Number" />
+    <property name="shortLabel" value="Number" />
+    <property name="maxLength" value="10" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="12" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardHolderZipCode" parent="ProcurementCardHolder-cardHolderZipCode-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardHolderZipCode-parentBean" abstract="true" parent="ExternalizableAttributeDefinitionProxy"
+  	p:sourceExternalizableBusinessObjectInterface="org.kuali.rice.kns.bo.PostalCode"
+	p:sourceAttributeName="postalCode">
+    <property name="name" value="cardHolderZipCode" />
+    <property name="label" value="Card Holder Postal (ZIP) Code" />
+    <property name="shortLabel" value="Code" />
+  </bean>
+  <bean id="ProcurementCardHolder-cardLimit" parent="ProcurementCardHolder-cardLimit-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardLimit-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardLimit" />
+    <property name="forceUppercase" value="true" />
+    <property name="label" value="Card Limit" />
+    <property name="shortLabel" value="Limit" />
+    <property name="maxLength" value="19" />
+    <property name="validationPattern" >
+      <bean parent="FloatingPointValidationPattern" />
+    </property>
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="21" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardNoteText" parent="ProcurementCardHolder-cardNoteText-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardNoteText-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardNoteText" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Card Note Text" />
+    <property name="shortLabel" value="Text" />
+    <property name="maxLength" value="50" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="52" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-cardStatusCode" parent="ProcurementCardHolder-cardStatusCode-parentBean" />
+
+  <bean id="ProcurementCardHolder-cardStatusCode-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="cardStatusCode" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Card Status Code" />
+    <property name="shortLabel" value="Code" />
+    <property name="maxLength" value="2" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="4" />
+    </property>
+  </bean>
+  <bean id="ProcurementCardHolder-chartOfAccountsCode" parent="ProcurementCardHolder-chartOfAccountsCode-parentBean" />
+
+  <bean id="ProcurementCardHolder-chartOfAccountsCode-parentBean" abstract="true" parent="Chart-chartOfAccountsCode">
+    <property name="label" value="Default Chart" />
+    <property name="shortLabel" value="Dflt Chrt" />
+  </bean>
+  <bean id="ProcurementCardHolder-documentNumber" parent="ProcurementCardHolder-documentNumber-parentBean" />
+
+  <bean id="ProcurementCardHolder-documentNumber-parentBean" abstract="true" parent="DocumentHeader-documentNumber">
+  	<property name="forceUppercase" value="true" />
+  </bean>
+  <bean id="ProcurementCardHolder-subAccountNumber" parent="ProcurementCardHolder-subAccountNumber-parentBean" />
+
+  <bean id="ProcurementCardHolder-subAccountNumber-parentBean" abstract="true" parent="SubAccount-subAccountNumber">
+    <property name="label" value="Default Sub-Account" />
+    <property name="shortLabel" value="Dflt Sub-Acct" />
+    <property name="required" value="false" />
+  </bean>
+  <bean id="ProcurementCardHolder-transactionCreditCardNumber" parent="ProcurementCardHolder-transactionCreditCardNumber-parentBean" />
+
+  <bean id="ProcurementCardHolder-transactionCreditCardNumber-parentBean" abstract="true" parent="AttributeDefinition">
+    <property name="name" value="transactionCreditCardNumber" />
+    <property name="forceUppercase" value="false" />
+    <property name="label" value="Transaction Credit Card Number" />
+    <property name="shortLabel" value="Number" />
+    <property name="maxLength" value="16" />
+    <property name="control" >
+      <bean parent="TextControlDefinition"
+            p:size="18" />
+    </property>
+    
+	<property name="attributeSecurity">
+       <bean parent="AttributeSecurity">
+  		  <property name="mask" value="true" /> 
+		  <property name="maskFormatter">
+             <bean parent="MaskFormatterLiteral" p:literal="*********" /> 
+  	      </property>
+       </bean>
+    </property>    
+  </bean>
+
+<!-- Business Object Inquiry Definition -->
+
+
+  <bean id="ProcurementCardHolder-inquiryDefinition" parent="ProcurementCardHolder-inquiryDefinition-parentBean" />
+
+  <bean id="ProcurementCardHolder-inquiryDefinition-parentBean" abstract="true" parent="InquiryDefinition">
+    <property name="title" value="Procurement Card Holder Inquiry" />
+    <property name="inquirySections" >
+      <list>
+        <bean parent="InquirySectionDefinition">
+          <property name="title" value="" />
+          <property name="numberOfColumns" value="1" />
+          <property name="inquiryFields" >
+            <list>
+              <bean parent="FieldDefinition"
+                    p:attributeName="documentNumber" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardCycleAmountLimit" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardCycleVolumeLimit" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardHolderName" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardHolderAlternateName" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardHolderCityName" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardHolderLine1Address" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardHolderLine2Address" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardHolderStateCode" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardHolderWorkPhoneNumber" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardHolderZipCode" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardLimit" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardNoteText" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="cardStatusCode" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="chartOfAccountsCode" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="accountNumber" />
+              <bean parent="FieldDefinition"
+                    p:attributeName="subAccountNumber" />
+            </list>
+          </property>
+        </bean>
+      </list>
+    </property>
+  </bean>
+</beans>

Property changes on: financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/businessobject/datadictionary/ProcurementCardHolder.xml
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: work/src/edu/arizona/kfs/fp/businessobject/ProcurementCardHolder.java
===================================================================
--- work/src/edu/arizona/kfs/fp/businessobject/ProcurementCardHolder.java	(revision 0)
+++ work/src/edu/arizona/kfs/fp/businessobject/ProcurementCardHolder.java	(revision 2244)
@@ -0,0 +1,487 @@
+/*
+ * Copyright 2006-2007 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package edu.arizona.kfs.fp.businessobject;
+
+import java.util.LinkedHashMap;
+
+import org.kuali.kfs.coa.businessobject.Account;
+import org.kuali.kfs.coa.businessobject.Chart;
+import org.kuali.kfs.coa.businessobject.SubAccount;
+import edu.arizona.kfs.fp.businessobject.ProcurementCardHolderDetail;
+import org.kuali.kfs.sys.KFSPropertyConstants;
+import org.kuali.rice.kns.bo.PersistableBusinessObjectBase;
+import org.kuali.rice.kns.util.KualiDecimal;
+
+/**
+ * This class is used to represent a procurement card holder, or the individual whose name is on the card.
+ */
+public class ProcurementCardHolder extends PersistableBusinessObjectBase {
+
+    private String documentNumber;
+    private String transactionCreditCardNumber;
+    private String cardHolderName;
+    private String cardHolderAlternateName;
+    private String cardHolderLine1Address;
+    private String cardHolderLine2Address;
+    private String cardHolderCityName;
+    private String cardHolderStateCode;
+    private String cardHolderZipCode;
+    private String cardHolderWorkPhoneNumber;
+    private KualiDecimal cardLimit;
+    private KualiDecimal cardCycleAmountLimit;
+    private KualiDecimal cardCycleVolumeLimit;
+    private String cardStatusCode;
+    private String cardNoteText;
+    private String chartOfAccountsCode;
+    private String accountNumber;
+    private String subAccountNumber;
+
+    private Account account;
+    private Chart chartOfAccounts;
+    private SubAccount subAccount;
+    private ProcurementCardHolderDetail procurementCardHolderDetail;
+
+    /**
+     * Default constructor.
+     */
+    public ProcurementCardHolder() {
+
+    }
+
+    /**
+     * Gets the documentNumber attribute.
+     * 
+     * @return Returns the documentNumber
+     */
+    public String getDocumentNumber() {
+        return documentNumber;
+    }
+
+    /**
+     * Sets the documentNumber attribute.
+     * 
+     * @param documentNumber The documentNumber to set.
+     */
+    public void setDocumentNumber(String documentNumber) {
+        this.documentNumber = documentNumber;
+    }
+
+
+    /**
+     * Gets the transactionCreditCardNumber attribute.
+     * 
+     * @return Returns the transactionCreditCardNumber
+     */
+    public String getTransactionCreditCardNumber() {
+        return transactionCreditCardNumber;
+    }
+
+    /**
+     * Sets the transactionCreditCardNumber attribute.
+     * 
+     * @param transactionCreditCardNumber The transactionCreditCardNumber to set.
+     */
+    public void setTransactionCreditCardNumber(String transactionCreditCardNumber) {
+        this.transactionCreditCardNumber = transactionCreditCardNumber;
+    }
+
+
+    /**
+     * Gets the cardHolderName attribute.
+     * 
+     * @return Returns the cardHolderName
+     */
+    public String getCardHolderName() {
+        return cardHolderName;
+    }
+
+    /**
+     * Sets the cardHolderName attribute.
+     * 
+     * @param cardHolderName The cardHolderName to set.
+     */
+    public void setCardHolderName(String cardHolderName) {
+        this.cardHolderName = cardHolderName;
+    }
+
+
+    /**
+     * Gets the cardHolderAlternateName attribute.
+     * 
+     * @return Returns the cardHolderAlternateName
+     */
+    public String getCardHolderAlternateName() {
+        return cardHolderAlternateName;
+    }
+
+    /**
+     * Sets the cardHolderAlternateName attribute.
+     * 
+     * @param cardHolderAlternateName The cardHolderAlternateName to set.
+     */
+    public void setCardHolderAlternateName(String cardHolderAlternateName) {
+        this.cardHolderAlternateName = cardHolderAlternateName;
+    }
+
+
+    /**
+     * Gets the cardHolderLine1Address attribute.
+     * 
+     * @return Returns the cardHolderLine1Address
+     */
+    public String getCardHolderLine1Address() {
+        return cardHolderLine1Address;
+    }
+
+    /**
+     * Sets the cardHolderLine1Address attribute.
+     * 
+     * @param cardHolderLine1Address The cardHolderLine1Address to set.
+     */
+    public void setCardHolderLine1Address(String cardHolderLine1Address) {
+        this.cardHolderLine1Address = cardHolderLine1Address;
+    }
+
+
+    /**
+     * Gets the cardHolderLine2Address attribute.
+     * 
+     * @return Returns the cardHolderLine2Address
+     */
+    public String getCardHolderLine2Address() {
+        return cardHolderLine2Address;
+    }
+
+    /**
+     * Sets the cardHolderLine2Address attribute.
+     * 
+     * @param cardHolderLine2Address The cardHolderLine2Address to set.
+     */
+    public void setCardHolderLine2Address(String cardHolderLine2Address) {
+        this.cardHolderLine2Address = cardHolderLine2Address;
+    }
+
+
+    /**
+     * Gets the cardHolderCityName attribute.
+     * 
+     * @return Returns the cardHolderCityName
+     */
+    public String getCardHolderCityName() {
+        return cardHolderCityName;
+    }
+
+    /**
+     * Sets the cardHolderCityName attribute.
+     * 
+     * @param cardHolderCityName The cardHolderCityName to set.
+     */
+    public void setCardHolderCityName(String cardHolderCityName) {
+        this.cardHolderCityName = cardHolderCityName;
+    }
+
+
+    /**
+     * Gets the cardHolderStateCode attribute.
+     * 
+     * @return Returns the cardHolderStateCode
+     */
+    public String getCardHolderStateCode() {
+        return cardHolderStateCode;
+    }
+
+    /**
+     * Sets the cardHolderStateCode attribute.
+     * 
+     * @param cardHolderStateCode The cardHolderStateCode to set.
+     */
+    public void setCardHolderStateCode(String cardHolderStateCode) {
+        this.cardHolderStateCode = cardHolderStateCode;
+    }
+
+
+    /**
+     * Gets the cardHolderZipCode attribute.
+     * 
+     * @return Returns the cardHolderZipCode
+     */
+    public String getCardHolderZipCode() {
+        return cardHolderZipCode;
+    }
+
+    /**
+     * Sets the cardHolderZipCode attribute.
+     * 
+     * @param cardHolderZipCode The cardHolderZipCode to set.
+     */
+    public void setCardHolderZipCode(String cardHolderZipCode) {
+        this.cardHolderZipCode = cardHolderZipCode;
+    }
+
+
+    /**
+     * Gets the cardHolderWorkPhoneNumber attribute.
+     * 
+     * @return Returns the cardHolderWorkPhoneNumber
+     */
+    public String getCardHolderWorkPhoneNumber() {
+        return cardHolderWorkPhoneNumber;
+    }
+
+    /**
+     * Sets the cardHolderWorkPhoneNumber attribute.
+     * 
+     * @param cardHolderWorkPhoneNumber The cardHolderWorkPhoneNumber to set.
+     */
+    public void setCardHolderWorkPhoneNumber(String cardHolderWorkPhoneNumber) {
+        this.cardHolderWorkPhoneNumber = cardHolderWorkPhoneNumber;
+    }
+
+
+    /**
+     * Gets the cardLimit attribute.
+     * 
+     * @return Returns the cardLimit
+     */
+    public KualiDecimal getCardLimit() {
+        return cardLimit;
+    }
+
+    /**
+     * Sets the cardLimit attribute.
+     * 
+     * @param cardLimit The cardLimit to set.
+     */
+    public void setCardLimit(KualiDecimal cardLimit) {
+        this.cardLimit = cardLimit;
+    }
+
+
+    /**
+     * Gets the cardCycleAmountLimit attribute.
+     * 
+     * @return Returns the cardCycleAmountLimit
+     */
+    public KualiDecimal getCardCycleAmountLimit() {
+        return cardCycleAmountLimit;
+    }
+
+    /**
+     * Sets the cardCycleAmountLimit attribute.
+     * 
+     * @param cardCycleAmountLimit The cardCycleAmountLimit to set.
+     */
+    public void setCardCycleAmountLimit(KualiDecimal cardCycleAmountLimit) {
+        this.cardCycleAmountLimit = cardCycleAmountLimit;
+    }
+
+
+    /**
+     * Gets the cardCycleVolumeLimit attribute.
+     * 
+     * @return Returns the cardCycleVolumeLimit
+     */
+    public KualiDecimal getCardCycleVolumeLimit() {
+        return cardCycleVolumeLimit;
+    }
+
+    /**
+     * Sets the cardCycleVolumeLimit attribute.
+     * 
+     * @param cardCycleVolumeLimit The cardCycleVolumeLimit to set.
+     */
+    public void setCardCycleVolumeLimit(KualiDecimal cardCycleVolumeLimit) {
+        this.cardCycleVolumeLimit = cardCycleVolumeLimit;
+    }
+
+
+    /**
+     * Gets the cardStatusCode attribute.
+     * 
+     * @return Returns the cardStatusCode
+     */
+    public String getCardStatusCode() {
+        return cardStatusCode;
+    }
+
+    /**
+     * Sets the cardStatusCode attribute.
+     * 
+     * @param cardStatusCode The cardStatusCode to set.
+     */
+    public void setCardStatusCode(String cardStatusCode) {
+        this.cardStatusCode = cardStatusCode;
+    }
+
+
+    /**
+     * Gets the cardNoteText attribute.
+     * 
+     * @return Returns the cardNoteText
+     */
+    public String getCardNoteText() {
+        return cardNoteText;
+    }
+
+    /**
+     * Sets the cardNoteText attribute.
+     * 
+     * @param cardNoteText The cardNoteText to set.
+     */
+    public void setCardNoteText(String cardNoteText) {
+        this.cardNoteText = cardNoteText;
+    }
+
+
+    /**
+     * Gets the chartOfAccountsCode attribute.
+     * 
+     * @return Returns the chartOfAccountsCode
+     */
+    public String getChartOfAccountsCode() {
+        return chartOfAccountsCode;
+    }
+
+    /**
+     * Sets the chartOfAccountsCode attribute.
+     * 
+     * @param chartOfAccountsCode The chartOfAccountsCode to set.
+     */
+    public void setChartOfAccountsCode(String chartOfAccountsCode) {
+        this.chartOfAccountsCode = chartOfAccountsCode;
+    }
+
+
+    /**
+     * Gets the accountNumber attribute.
+     * 
+     * @return Returns the accountNumber
+     */
+    public String getAccountNumber() {
+        return accountNumber;
+    }
+
+    /**
+     * Sets the accountNumber attribute.
+     * 
+     * @param accountNumber The accountNumber to set.
+     */
+    public void setAccountNumber(String accountNumber) {
+        this.accountNumber = accountNumber;
+    }
+
+
+    /**
+     * Gets the subAccountNumber attribute.
+     * 
+     * @return Returns the subAccountNumber
+     */
+    public String getSubAccountNumber() {
+        return subAccountNumber;
+    }
+
+    /**
+     * Sets the subAccountNumber attribute.
+     * 
+     * @param subAccountNumber The subAccountNumber to set.
+     */
+    public void setSubAccountNumber(String subAccountNumber) {
+        this.subAccountNumber = subAccountNumber;
+    }
+
+
+    /**
+     * Gets the account attribute.
+     * 
+     * @return Returns the account
+     */
+    public Account getAccount() {
+        return account;
+    }
+
+    /**
+     * Sets the account attribute.
+     * 
+     * @param account The account to set.
+     * @deprecated
+     */
+    public void setAccount(Account account) {
+        this.account = account;
+    }
+
+    /**
+     * Gets the chartOfAccounts attribute.
+     * 
+     * @return Returns the chartOfAccounts
+     */
+    public Chart getChartOfAccounts() {
+        return chartOfAccounts;
+    }
+
+    /**
+     * Sets the chartOfAccounts attribute.
+     * 
+     * @param chartOfAccounts The chartOfAccounts to set.
+     * @deprecated
+     */
+    public void setChartOfAccounts(Chart chartOfAccounts) {
+        this.chartOfAccounts = chartOfAccounts;
+    }
+
+    /**
+     * @return Returns the subAccount.
+     */
+    public SubAccount getSubAccount() {
+        return subAccount;
+    }
+
+    /**
+     * Sets the subAccount attribute.
+     * 
+     * @param subAccount The subAccount to set.
+     * @deprecated
+     */
+    public void setSubAccount(SubAccount subAccount) {
+        this.subAccount = subAccount;
+    }
+    
+    /**
+     * @return Returns the procurementCardHolderDetail.
+     */
+    public ProcurementCardHolderDetail getProcurementCardHolderDetail() {
+        return procurementCardHolderDetail;
+    }
+    
+    /**
+     * Sets the procurementCardHolderDetail attribute.
+     * 
+     * @param procurementCardHolderDetail The procurementCardHolderDetail to set.
+     * @deprecated
+     */
+    public void setProcurementCardHolderDetail(ProcurementCardHolderDetail procurementCardHolderDetail) {
+        this.procurementCardHolderDetail = procurementCardHolderDetail;
+    }
+
+    /**
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
+     */
+    protected LinkedHashMap toStringMapper() {
+        LinkedHashMap m = new LinkedHashMap();
+        m.put(KFSPropertyConstants.DOCUMENT_NUMBER, this.documentNumber);
+        return m;
+    }
+}

Property changes on: financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/businessobject/ProcurementCardHolder.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: work/src/edu/arizona/kfs/fp/spring-fp.xml
===================================================================
--- work/src/edu/arizona/kfs/fp/spring-fp.xml	(revision 2238)
+++ work/src/edu/arizona/kfs/fp/spring-fp.xml	(revision 2244)
@@ -43,9 +43,55 @@
 			   <value>edu/arizona/kfs/fp/ojb-fp.xml</value> 
 			</list>
 		</property>
-	</bean>  
+	</bean> 
 	
 	<!-- validations -->
-	<import resource="document/validation/configuration/GeneralErrorCorrectionValidation.xml" />
+	<import resource="document/validation/configuration/GeneralErrorCorrectionValidation.xml" /> 
+	
+	<bean id="procurementCardHolderDerivedRoleTypeService" class="edu.arizona.kfs.fp.identity.ProcurementCardHolderDerivedRoleTypeServiceImpl" />  
+	<bean class="org.kuali.rice.ksb.messaging.KSBExporter">
+    	<property name="serviceDefinition">
+      	<bean parent="kfsService"
+        	p:service-ref="procurementCardHolderDerivedRoleTypeService"
+        	p:localServiceName="procurementCardHolderDerivedRoleTypeService" />
+	    </property>
+	</bean>
+	
+	<bean id="procurementCardReconcilerDerivedRoleTypeService" class="edu.arizona.kfs.fp.identity.ProcurementCardReconcilerDerivedRoleTypeServiceImpl" />  
+	<bean class="org.kuali.rice.ksb.messaging.KSBExporter">
+    	<property name="serviceDefinition">
+      	<bean parent="kfsService"
+        	p:service-ref="procurementCardReconcilerDerivedRoleTypeService"
+        	p:localServiceName="procurementCardReconcilerDerivedRoleTypeService" />
+	    </property>
+	</bean>
+	
+	<bean id="procurementCardCreateDocumentService" class="edu.arizona.kfs.fp.batch.service.impl.ProcurementCardCreateDocumentServiceImpl">
+		<property name="parameterService">
+			<ref bean="parameterService" />
+		</property>
+		<property name="businessObjectService">
+			<ref bean="businessObjectService" />
+		</property>
+		<property name="documentService">
+			<ref bean="documentService" />
+		</property>
+		<property name="dataDictionaryService">
+			<ref bean="dataDictionaryService" />
+		</property>
+		<property name="dateTimeService">
+			<ref bean="dateTimeService" />
+		</property>
+		<property name="workflowDocumentService">
+			<ref bean="workflowDocumentService" />
+		</property>
+		<property name="accountingLineRuleUtil">
+			<ref bean="accountingLineRuleHelperService" />
+		</property>
+		<property name="capitalAssetBuilderModuleService">
+			<ref bean="capitalAssetBuilderModuleService" />
+		</property>
+	</bean>
+	
 </beans>
 
Index: work/src/edu/arizona/kfs/fp/identity/ProcurementCardHolderDerivedRoleTypeServiceImpl.java
===================================================================
--- work/src/edu/arizona/kfs/fp/identity/ProcurementCardHolderDerivedRoleTypeServiceImpl.java	(revision 0)
+++ work/src/edu/arizona/kfs/fp/identity/ProcurementCardHolderDerivedRoleTypeServiceImpl.java	(revision 2244)
@@ -0,0 +1,38 @@
+/*
+ * Copyright 2008 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.fp.identity;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.rice.kim.bo.Role;
+import org.kuali.rice.kim.bo.role.dto.RoleMembershipInfo;
+import org.kuali.rice.kim.bo.types.dto.AttributeSet;
+import org.kuali.rice.kim.service.support.impl.KimDerivedRoleTypeServiceBase;
+
+public class ProcurementCardHolderDerivedRoleTypeServiceImpl extends KimDerivedRoleTypeServiceBase {
+    public static final String PROCUREMENT_CARDHOLDER_USER_ID = "cardHolderSystemId";
+    
+    @Override
+    public List<RoleMembershipInfo> getRoleMembersFromApplicationRole(String namespaceCode, String roleName, AttributeSet qualification) {
+        List<RoleMembershipInfo> members = new ArrayList<RoleMembershipInfo>(1);
+        if ((qualification != null) && StringUtils.isNotBlank(qualification.get(PROCUREMENT_CARDHOLDER_USER_ID))) {
+            members.add(new RoleMembershipInfo(null, null, qualification.get(PROCUREMENT_CARDHOLDER_USER_ID), Role.PRINCIPAL_MEMBER_TYPE, null));
+        }
+        return members;
+    }
+}
\ No newline at end of file

Property changes on: financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/identity/ProcurementCardHolderDerivedRoleTypeServiceImpl.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: work/src/edu/arizona/kfs/fp/identity/ProcurementCardReconcilerDerivedRoleTypeServiceImpl.java
===================================================================
--- work/src/edu/arizona/kfs/fp/identity/ProcurementCardReconcilerDerivedRoleTypeServiceImpl.java	(revision 0)
+++ work/src/edu/arizona/kfs/fp/identity/ProcurementCardReconcilerDerivedRoleTypeServiceImpl.java	(revision 2244)
@@ -0,0 +1,44 @@
+/*
+ * Copyright 2008 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package edu.arizona.kfs.fp.identity;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.commons.lang.StringUtils;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.rice.kim.bo.Role;
+import org.kuali.rice.kim.bo.role.dto.RoleMembershipInfo;
+import org.kuali.rice.kim.bo.types.dto.AttributeSet;
+import org.kuali.rice.kim.service.support.impl.KimDerivedRoleTypeServiceBase;
+import org.kuali.rice.kim.service.GroupService;
+
+public class ProcurementCardReconcilerDerivedRoleTypeServiceImpl extends KimDerivedRoleTypeServiceBase {
+    public static final String PROCUREMENT_CARD_RECONCILER_GROUP_ID = "cardGroupId";
+    @Override
+    public List<RoleMembershipInfo> getRoleMembersFromApplicationRole(String namespaceCode, String roleName, AttributeSet qualification) {
+        List<String> groupMembers = new ArrayList<String>();
+        List<RoleMembershipInfo> members = new ArrayList<RoleMembershipInfo>();
+        if ((qualification != null) && StringUtils.isNotBlank(qualification.get(PROCUREMENT_CARD_RECONCILER_GROUP_ID))) {
+            groupMembers = SpringContext.getBean(GroupService.class).getMemberPrincipalIds(qualification.get(PROCUREMENT_CARD_RECONCILER_GROUP_ID));
+            for (String groupMember : groupMembers) {
+                members.add(new RoleMembershipInfo(null, null, groupMember, Role.PRINCIPAL_MEMBER_TYPE, null));
+            }
+            
+        }
+        return members;
+    }
+}
\ No newline at end of file

Property changes on: financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/identity/ProcurementCardReconcilerDerivedRoleTypeServiceImpl.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: work/src/edu/arizona/kfs/fp/document/datadictionary/ProcurementCardDocument.xml
===================================================================
--- work/src/edu/arizona/kfs/fp/document/datadictionary/ProcurementCardDocument.xml	(revision 0)
+++ work/src/edu/arizona/kfs/fp/document/datadictionary/ProcurementCardDocument.xml	(revision 2244)
@@ -0,0 +1,166 @@
+<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:dd="http://rice.kuali.org/dd" xsi:schemaLocation="http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.0.xsd         http://rice.kuali.org/dd         http://rice.kuali.org/dd/dd.xsd">
+
+  <bean id="ProcurementCardDocument" parent="ProcurementCardDocument-parentBean"/>
+  <bean id="ProcurementCardDocument-parentBean" abstract="true" parent="AccountingDocumentEntry">
+    <property name="documentTypeName" value="PCDO"/>
+    <property name="documentClass" value="edu.arizona.kfs.fp.document.ProcurementCardDocument"/>
+    <property name="businessRulesClass" value="org.kuali.kfs.sys.document.validation.impl.AccountingRuleEngineRuleBase"/>
+    <property name="documentAuthorizerClass" value="org.kuali.kfs.fp.document.authorization.ProcurementCardDocumentAuthorizer"/>
+    <property name="documentPresentationControllerClass" value="org.kuali.kfs.fp.document.authorization.ProcurementCardDocumentPresentationController"/>
+    
+    <property name="sessionDocument" value="true"/>
+    <property name="allowsErrorCorrection" value="false"/>
+
+    <property name="validationMap" ref="ProcurementCardDocument-validations"/>
+    <property name="accountingLineGroups">
+    	<map>
+	    	<entry>
+	    		<key><value>target</value></key>
+	    		<ref bean="ProcurementCardDocument-targetAccountingLineGroup" parent="AccountingLineGroup"/>
+	    	</entry>
+    	</map>
+    </property>  
+    <property name="importedLineParserClass" value="org.kuali.kfs.sys.businessobject.AccountingLineParserBase"/>
+    <property name="workflowAttributes">
+    	<ref bean="ProcurementCardDocument-workflowAttributes"/>
+    </property>   
+  </bean>
+  
+  <!-- Validations -->
+  <bean id="ProcurementCardDocument-validations" parent="ProcurementCardDocument-validations-parentBean"/>
+  <bean id="ProcurementCardDocument-validations-parentBean" class="org.springframework.beans.factory.config.MapFactoryBean">
+  	<property name="sourceMap">
+		<map>
+			<entry>
+				<key><value>org.kuali.kfs.sys.document.validation.event.AttributedRouteDocumentEvent</value></key>
+				<value>ProcurementCard-routeDocumentValidation</value>
+			</entry>
+			<entry>
+				<key><value>org.kuali.kfs.sys.document.validation.event.AttributedApproveDocumentEvent</value></key>
+				<value>ProcurementCard-approveDocumentValidation</value>
+			</entry>
+			<entry>
+				<key><value>org.kuali.kfs.sys.document.validation.event.AddAccountingLineEvent</value></key>
+				<value>ProcurementCard-addAccountingLineValidation</value>
+			</entry>
+			<entry>
+				<key><value>org.kuali.kfs.sys.document.validation.event.DeleteAccountingLineEvent</value></key>
+				<value>ProcurementCard-deleteAccountingLineValidation</value>
+			</entry>
+			<entry>
+				<key><value>org.kuali.kfs.sys.document.validation.event.UpdateAccountingLineEvent</value></key>
+				<value>ProcurementCard-updateAccountingLineValidation</value>
+			</entry>
+			<entry>
+				<key><value>org.kuali.kfs.sys.document.validation.event.ReviewAccountingLineEvent</value></key>
+				<value>ProcurementCard-reviewAccountingLineValidation</value>
+			</entry>
+    	</map>
+    </property>
+  </bean>
+
+  <!-- accounting line groups -->	
+  <bean id="ProcurementCardDocument-targetAccountingLineGroup" parent="ProcurementCardDocument-targetAccountingLineGroup-parentBean"/>	
+  <bean id="ProcurementCardDocument-targetAccountingLineGroup-parentBean" parent="AccountingLineGroup" abstract="true">
+	  <property name="accountingLineView" ref="ProcurementCard-accountingLineView"/>
+	  <property name="accountingLineClass" value="org.kuali.kfs.fp.businessobject.ProcurementCardTargetAccountingLine"/>
+	  <property name="groupLabel" value="Accounting Lines"/>
+	  <property name="accountingLineAuthorizerClass" value="org.kuali.kfs.fp.document.authorization.ProcurementCardAccountingLineAuthorizer"/>
+	  <property name="importedLinePropertyPrefix" value="target"/>
+	  <property name="totals" ref="ProcurementCard-targetGroupTotals"/>
+	  <property name="errorKey" value="document.targetAccounting*,targetAccountingLines,newTargetLine*"/>
+  </bean>
+  
+  <bean id="ProcurementCard-accountingLineView" parent="ProcurementCard-accountingLineView-parent"/> 
+  <bean id="ProcurementCard-accountingLineView-parent" parent="AccountingLineView" abstract="true">
+		<property name="elements">
+			<list>
+				<bean parent="AccountingLineView-countedSequenceNumber"/>
+				<bean parent="AccountingLineView-lines">
+					<property name="lines">
+						<list>
+							<ref bean="accountingInformation"/>
+							<ref bean="salesTaxInformation"/>
+						</list>
+					</property>
+				</bean>
+				<bean parent="AccountingLineView-field" p:name="amount" p:required="true"/>
+				<bean parent="AccountingLineView-actions"/>
+			</list>
+		</property>
+  </bean>
+  
+  <bean id="ProcurementCard-targetGroupTotals" class="org.springframework.beans.factory.config.ListFactoryBean">
+    	<property name="sourceList">
+    		<list>
+    			<bean class="org.kuali.kfs.fp.document.web.ProcurementCardGroupTotalDefinition" p:totalProperty="targetTotal" p:representedProperty="amount"/>
+    		</list>
+    	</property>
+  </bean>
+    
+  <!-- workflow attributes for routing -->
+  <bean id="ProcurementCardDocument-workflowAttributes" parent="ProcurementCardDocument-workflowAttributes-parentBean"/>    
+  <bean id="ProcurementCardDocument-workflowAttributes-parentBean" abstract="true" parent="WorkflowAttributes">    	
+    	<property name="routingTypeDefinitions">
+    		<map>
+     			<entry key="AccountFullEdit" value-ref="RoutingType-AccountingDocument-Account-targetOnly"/>   		
+    			<entry key="Account" value-ref="RoutingType-AccountingDocument-Account-targetOnly"/>
+    			<entry key="AccountingOrganizationHierarchy" value-ref="RoutingType-AccountingDocument-OrganizationHierarchy-targetOnly"/>
+    			<entry key="ProcurementCardholder" value-ref="RoutingType-ProcurementCardDocument-ProcurementCardholder"/>
+    			<entry key="ProcurementCardReconciler" value-ref="RoutingType-ProcurementCardDocument-ProcurementCardReconciler"/>
+    			<entry key="SubFund" value-ref="RoutingType-AccountingDocument-SubFund-targetOnly"/>
+    		</map>
+    	</property>
+  </bean>
+  
+  <bean id="ProcurementCardDocument-RoutingAttribute-cardHolderSystemId" class="org.kuali.rice.kns.datadictionary.RoutingAttribute">
+    	<property name="qualificationAttributeName" value="cardHolderSystemId"/>
+  </bean>
+  
+  <bean id="ProcurementCardDocument-RoutingAttribute-cardGroupId" class="org.kuali.rice.kns.datadictionary.RoutingAttribute">
+    	<property name="qualificationAttributeName" value="cardGroupId"/>
+  </bean>
+	
+  <bean id="ProcurementCardDocument-DocumentValuePathGroup-cardHolderSystemId" class="org.kuali.rice.kns.datadictionary.DocumentValuePathGroup">
+  	<property name="documentValues">
+		<list>
+	   		<value>procurementCardHolder.procurementCardHolderDetail.cardHolderSystemId</value>   			
+		</list>
+  	</property>
+  </bean>
+   	
+   <bean id="ProcurementCardDocument-DocumentValuePathGroup-cardGroupId" class="org.kuali.rice.kns.datadictionary.DocumentValuePathGroup">
+  	<property name="documentValues">
+		<list>
+	   		<value>procurementCardHolder.procurementCardHolderDetail.cardGroupId</value>   			
+		</list>
+  	</property>
+  </bean>
+   	
+  <bean id="RoutingType-ProcurementCardDocument-ProcurementCardholder" class="org.kuali.rice.kns.datadictionary.RoutingTypeDefinition">
+  	<property name="routingAttributes">
+    	<list>
+	    	<ref bean="ProcurementCardDocument-RoutingAttribute-cardHolderSystemId"/>		       
+        </list>
+    </property>
+    	<property name="documentValuePathGroups">
+    		<list>
+    			<ref bean="ProcurementCardDocument-DocumentValuePathGroup-cardHolderSystemId"/>
+    		</list>
+    	</property>
+  </bean>  
+  
+  <bean id="RoutingType-ProcurementCardDocument-ProcurementCardReconciler" class="org.kuali.rice.kns.datadictionary.RoutingTypeDefinition">
+  	<property name="routingAttributes">
+    	<list>
+	    	<ref bean="ProcurementCardDocument-RoutingAttribute-cardGroupId"/>		       
+        </list>
+    </property>
+    	<property name="documentValuePathGroups">
+    		<list>
+    			<ref bean="ProcurementCardDocument-DocumentValuePathGroup-cardGroupId"/>
+    		</list>
+    	</property>
+  </bean>  
+  
+</beans>
\ No newline at end of file

Property changes on: financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/document/datadictionary/ProcurementCardDocument.xml
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: work/src/edu/arizona/kfs/fp/document/workflow/ProcurementCardDocument.xml
===================================================================
--- work/src/edu/arizona/kfs/fp/document/workflow/ProcurementCardDocument.xml	(revision 0)
+++ work/src/edu/arizona/kfs/fp/document/workflow/ProcurementCardDocument.xml	(revision 2244)
@@ -0,0 +1,63 @@
+<?xml version='1.0' encoding='UTF-8'?> 
+<data xmlns="ns:workflow" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="ns:workflow resource:WorkflowData">
+  <documentTypes xmlns="ns:workflow/DocumentType" xsi:schemaLocation="ns:workflow/DocumentType resource:DocumentType">
+    <documentType>
+      <name>PCDO</name>
+      <parent>FP</parent>
+      <docHandler>${application.url}/financialProcurementCard.do?methodToCall=docHandler</docHandler>
+      <routePaths>       
+        <routePath>
+          <start name="AdHoc" nextNode="HasReconciler"/>
+          <split name="HasReconciler" nextNode="AccountFullEdit">
+            <branch name="True">
+              <requests name="ProcurementCardholder" nextNode="ProcurementCardReconciler"/>
+              <requests name="ProcurementCardReconciler" nextNode="Join"/>
+            </branch>
+            <branch name="False">
+              <simple name="NoOp" nextNode="Join"/>
+            </branch>
+            <join name="Join"/>
+          </split>
+          <requests name="AccountFullEdit" nextNode="Account"/>
+          <requests name="Account" nextNode="AccountingOrganizationHierarchy"/>
+          <requests name="AccountingOrganizationHierarchy" nextNode="SubFund"/>
+          <requests name="SubFund"/>
+        </routePath>        
+      </routePaths>
+      <routeNodes>
+        <start name="AdHoc"/>
+        <role name="AccountFullEdit">
+          <qualifierResolverClass>org.kuali.rice.kns.workflow.attribute.DataDictionaryQualifierResolver</qualifierResolverClass>
+          <activationType>P</activationType>
+        </role>
+        <role name="Account">
+          <qualifierResolverClass>org.kuali.rice.kns.workflow.attribute.DataDictionaryQualifierResolver</qualifierResolverClass>
+          <activationType>P</activationType>
+        </role>
+        <role name="AccountingOrganizationHierarchy">
+          <qualifierResolverClass>org.kuali.rice.kns.workflow.attribute.DataDictionaryQualifierResolver</qualifierResolverClass>
+          <activationType>P</activationType>
+        </role>
+        <role name="ProcurementCardholder">
+          <qualifierResolverClass>org.kuali.rice.kns.workflow.attribute.DataDictionaryQualifierResolver</qualifierResolverClass>
+          <activationType>P</activationType>
+        </role>
+        <role name="ProcurementCardReconciler">
+          <qualifierResolverClass>org.kuali.rice.kns.workflow.attribute.DataDictionaryQualifierResolver</qualifierResolverClass>
+          <activationType>P</activationType>
+        </role>
+        <role name="SubFund">
+          <qualifierResolverClass>org.kuali.rice.kns.workflow.attribute.DataDictionaryQualifierResolver</qualifierResolverClass>
+          <activationType>P</activationType>
+        </role>
+         <split name="HasReconciler">
+          <type>org.kuali.kfs.sys.document.workflow.SimpleBooleanSplitNode</type>
+        </split>
+        <simple name="NoOp">
+          <type>org.kuali.rice.kew.engine.node.NoOpNode</type>
+        </simple>
+        <join name="Join"/>
+      </routeNodes>
+    </documentType>
+  </documentTypes>
+</data>
\ No newline at end of file

Property changes on: financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/document/workflow/ProcurementCardDocument.xml
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
Index: work/src/edu/arizona/kfs/fp/document/ProcurementCardDocument.java
===================================================================
--- work/src/edu/arizona/kfs/fp/document/ProcurementCardDocument.java	(revision 0)
+++ work/src/edu/arizona/kfs/fp/document/ProcurementCardDocument.java	(revision 2244)
@@ -0,0 +1,348 @@
+/*
+ * Copyright 2006-2007 The Kuali Foundation.
+ * 
+ * Licensed under the Educational Community License, Version 1.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ * http://www.opensource.org/licenses/ecl1.php
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package edu.arizona.kfs.fp.document;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.List;
+
+import org.kuali.kfs.fp.businessobject.CapitalAssetInformation;
+import edu.arizona.kfs.fp.businessobject.ProcurementCardHolder;
+import org.kuali.kfs.fp.businessobject.ProcurementCardSourceAccountingLine;
+import org.kuali.kfs.fp.businessobject.ProcurementCardTargetAccountingLine;
+import org.kuali.kfs.fp.businessobject.ProcurementCardTransactionDetail;
+import org.kuali.kfs.fp.document.CapitalAssetEditable;
+import org.kuali.kfs.integration.cam.CapitalAssetManagementModuleService;
+import org.kuali.kfs.sys.KFSConstants;
+import org.kuali.kfs.sys.KFSPropertyConstants;
+import org.kuali.kfs.sys.businessobject.AccountingLine;
+import org.kuali.kfs.sys.businessobject.GeneralLedgerPendingEntrySourceDetail;
+import org.kuali.kfs.sys.businessobject.SourceAccountingLine;
+import org.kuali.kfs.sys.businessobject.TargetAccountingLine;
+import org.kuali.kfs.sys.context.SpringContext;
+import org.kuali.kfs.sys.document.AccountingDocumentBase;
+import org.kuali.kfs.sys.document.AmountTotaling;
+import org.kuali.kfs.sys.document.FinancialSystemMaintenanceDocument;
+import org.kuali.kfs.sys.document.FinancialSystemTransactionalDocument;
+import org.kuali.kfs.sys.document.service.DebitDeterminerService;
+import org.kuali.rice.kew.dto.DocumentRouteStatusChangeDTO;
+import org.kuali.rice.kew.util.KEWConstants;
+import org.kuali.rice.kns.document.Document;
+import org.kuali.rice.kns.exception.ValidationException;
+import org.kuali.rice.kns.rule.event.KualiDocumentEvent;
+import org.kuali.rice.kns.rule.event.SaveDocumentEvent;
+import org.kuali.rice.kns.service.DataDictionaryService;
+import org.kuali.rice.kns.service.DocumentService;
+import org.kuali.rice.kns.util.ObjectUtils;
+import org.kuali.rice.kns.util.TypedArrayList;
+import org.kuali.rice.kns.workflow.service.KualiWorkflowDocument;
+
+/**
+ * This is the Procurement Card Document Class. The procurement cards distributes expenses from clearing accounts. It is a two-sided
+ * document, but only target lines are displayed because source lines cannot be changed. Transaction, Card, and Vendor information
+ * are associated with the document to help better distribute the expense.
+ */
+public class ProcurementCardDocument extends AccountingDocumentBase implements AmountTotaling, CapitalAssetEditable {
+    private static org.apache.log4j.Logger LOG = org.apache.log4j.Logger.getLogger(ProcurementCardDocument.class);
+
+    private static final String HAS_RECONCILER_NODE = "HasReconciler";
+    
+    private ProcurementCardHolder procurementCardHolder;
+
+    private List transactionEntries;
+    
+    private CapitalAssetInformation capitalAssetInformation;
+    private CapitalAssetManagementModuleService capitalAssetManagementModuleService;
+
+    /**
+     * Default constructor.
+     */
+    public ProcurementCardDocument() {
+        super();
+        transactionEntries = new TypedArrayList(ProcurementCardTransactionDetail.class);
+    }
+
+    /**
+     * @return Returns the transactionEntries.
+     */
+    public List getTransactionEntries() {
+        return transactionEntries;
+    }
+
+    /**
+     * @param transactionEntries The transactionEntries to set.
+     */
+    public void setTransactionEntries(List transactionEntries) {
+        this.transactionEntries = transactionEntries;
+    }
+
+    /**
+     * Gets the procurementCardHolder attribute.
+     * 
+     * @return Returns the procurementCardHolder.
+     */
+    public ProcurementCardHolder getProcurementCardHolder() {
+        return procurementCardHolder;
+    }
+
+    /**
+     * Sets the procurementCardHolder attribute value.
+     * 
+     * @param procurementCardHolder The procurementCardHolder to set.
+     */
+    public void setProcurementCardHolder(ProcurementCardHolder procurementCardHolder) {
+        this.procurementCardHolder = procurementCardHolder;
+    }
+
+    /**
+     * Removes the target accounting line at the given index from the transaction detail entry.
+     * 
+     * @param index
+     */
+    public void removeTargetAccountingLine(int index) {
+        ProcurementCardTargetAccountingLine line = (ProcurementCardTargetAccountingLine) getTargetAccountingLines().get(index);
+
+        for (Iterator iter = transactionEntries.iterator(); iter.hasNext();) {
+            ProcurementCardTransactionDetail transactionEntry = (ProcurementCardTransactionDetail) iter.next();
+            if (transactionEntry.getFinancialDocumentTransactionLineNumber().equals(line.getFinancialDocumentTransactionLineNumber())) {
+                transactionEntry.getTargetAccountingLines().remove(line);
+            }
+        }
+    }
+
+    /**
+     * Override to set the accounting line in the transaction detail object.
+     * 
+     * @see org.kuali.kfs.sys.document.AccountingDocument#addSourceAccountingLine(SourceAccountingLine)
+     */
+    @Override
+    public void addSourceAccountingLine(SourceAccountingLine sourceLine) {
+        ProcurementCardSourceAccountingLine line = (ProcurementCardSourceAccountingLine) sourceLine;
+
+        line.setSequenceNumber(this.getNextSourceLineNumber());
+
+        for (Iterator iter = transactionEntries.iterator(); iter.hasNext();) {
+            ProcurementCardTransactionDetail transactionEntry = (ProcurementCardTransactionDetail) iter.next();
+            if (transactionEntry.getFinancialDocumentTransactionLineNumber().equals(line.getFinancialDocumentTransactionLineNumber())) {
+                transactionEntry.getSourceAccountingLines().add(line);
+            }
+        }
+
+        this.nextSourceLineNumber = new Integer(this.getNextSourceLineNumber().intValue() + 1);
+    }
+
+    /**
+     * Override to set the accounting line in the transaction detail object.
+     * 
+     * @see org.kuali.kfs.sys.document.AccountingDocument#addTargetAccountingLine(TargetAccountingLine)
+     */
+    @Override
+    public void addTargetAccountingLine(TargetAccountingLine targetLine) {
+        ProcurementCardTargetAccountingLine line = (ProcurementCardTargetAccountingLine) targetLine;
+
+        line.setSequenceNumber(this.getNextTargetLineNumber());
+
+        for (Iterator iter = transactionEntries.iterator(); iter.hasNext();) {
+            ProcurementCardTransactionDetail transactionEntry = (ProcurementCardTransactionDetail) iter.next();
+            if (transactionEntry.getFinancialDocumentTransactionLineNumber().equals(line.getFinancialDocumentTransactionLineNumber())) {
+                transactionEntry.getTargetAccountingLines().add(line);
+            }
+        }
+
+        this.nextTargetLineNumber = new Integer(this.getNextTargetLineNumber().intValue() + 1);
+    }
+
+    /**
+     * Override to get source accounting lines out of transactions
+     * 
+     * @see org.kuali.kfs.sys.document.AccountingDocument#getSourceAccountingLines()
+     */
+    @Override
+    public List getSourceAccountingLines() {
+        List sourceAccountingLines = new ArrayList();
+
+        for (Iterator iter = transactionEntries.iterator(); iter.hasNext();) {
+            ProcurementCardTransactionDetail transactionEntry = (ProcurementCardTransactionDetail) iter.next();
+            for (Iterator iterator = transactionEntry.getSourceAccountingLines().iterator(); iterator.hasNext();) {
+                SourceAccountingLine sourceLine = (SourceAccountingLine) iterator.next();
+                sourceAccountingLines.add(sourceLine);
+            }
+        }
+
+        return sourceAccountingLines;
+    }
+
+    /**
+     * Override to get target accounting lines out of transactions
+     * 
+     * @see org.kuali.kfs.sys.document.AccountingDocument#getTargetAccountingLines()
+     */
+    @Override
+    public List getTargetAccountingLines() {
+        List targetAccountingLines = new ArrayList();
+
+        for (Iterator iter = transactionEntries.iterator(); iter.hasNext();) {
+            ProcurementCardTransactionDetail transactionEntry = (ProcurementCardTransactionDetail) iter.next();
+            for (Iterator iterator = transactionEntry.getTargetAccountingLines().iterator(); iterator.hasNext();) {
+                TargetAccountingLine targetLine = (TargetAccountingLine) iterator.next();
+                targetAccountingLines.add(targetLine);
+            }
+        }
+
+        return targetAccountingLines;
+    }
+
+    /**
+     * @see org.kuali.kfs.sys.document.AccountingDocumentBase#getSourceAccountingLineClass()
+     */
+    @Override
+    public Class getSourceAccountingLineClass() {
+        return ProcurementCardSourceAccountingLine.class;
+    }
+
+    /**
+     * @see org.kuali.kfs.sys.document.AccountingDocumentBase#getTargetAccountingLineClass()
+     */
+    @Override
+    public Class getTargetAccountingLineClass() {
+        return ProcurementCardTargetAccountingLine.class;
+    }
+
+    /**
+     * @see org.kuali.rice.kns.bo.BusinessObjectBase#toStringMapper()
+     */
+    @Override
+    protected LinkedHashMap toStringMapper() {
+        LinkedHashMap m = new LinkedHashMap();
+        m.put(KFSPropertyConstants.DOCUMENT_NUMBER, this.documentNumber);
+        return m;
+    }
+
+    @Override
+    public void doRouteStatusChange(DocumentRouteStatusChangeDTO statusChangeEvent) throws Exception {
+        if (KEWConstants.ROUTE_HEADER_ENROUTE_CD.equals(statusChangeEvent.getNewRouteStatus())) {
+            Document retrievedDocument = SpringContext.getBean(DocumentService.class).getByDocumentHeaderId(statusChangeEvent.getRouteHeaderId().toString());
+            String financialStatusCode = null;
+            if (retrievedDocument instanceof FinancialSystemTransactionalDocument) {
+                financialStatusCode = ((FinancialSystemTransactionalDocument) retrievedDocument).getDocumentHeader().getFinancialDocumentStatusCode();
+            } else if (retrievedDocument instanceof FinancialSystemMaintenanceDocument) {
+                financialStatusCode = ((FinancialSystemMaintenanceDocument) retrievedDocument).getDocumentHeader().getFinancialDocumentStatusCode();
+            }
+            if (KEWConstants.ROUTE_HEADER_ENROUTE_CD.equals(retrievedDocument.getDocumentHeader().getWorkflowDocument().getRouteHeader().getDocRouteStatus()) && !KEWConstants.ROUTE_HEADER_ENROUTE_CD.equals(financialStatusCode)) {
+                throw new RuntimeException("KFS document status is out of sync with Workflow document status");
+            }
+        }
+    }
+
+    /**
+     * On procurement card documents, positive source amounts are credits, negative source amounts are debits.
+     * 
+     * @param transactionalDocument The document the accounting line being checked is located in.
+     * @param accountingLine The accounting line being analyzed.
+     * @return True if the accounting line given is a debit accounting line, false otherwise.
+     * @throws Throws an IllegalStateException if one of the following rules are violated: the accounting line amount
+     *         is zero or the accounting line is not an expense or income accounting line.
+     * 
+     * @see org.kuali.module.financial.rules.FinancialDocumentRuleBase#isDebit(FinancialDocument, org.kuali.rice.kns.bo.AccountingLine)
+     * @see org.kuali.kfs.sys.document.validation.impl.AccountingDocumentRuleBase.IsDebitUtils#isDebitConsideringSection(AccountingDocumentRuleBase, AccountingDocument, AccountingLine)
+     */
+    public boolean isDebit(GeneralLedgerPendingEntrySourceDetail postable) throws IllegalStateException {
+        // disallow error correction
+        DebitDeterminerService isDebitUtils = SpringContext.getBean(DebitDeterminerService.class);
+        isDebitUtils.disallowErrorCorrectionDocumentCheck(this);
+        return isDebitUtils.isDebitConsideringSection(this, (AccountingLine)postable);
+    }
+    
+    /**
+     * Gets the capitalAssetInformation attribute. 
+     * @return Returns the capitalAssetInformation.
+     */
+    public CapitalAssetInformation getCapitalAssetInformation() {
+        return ObjectUtils.isNull(capitalAssetInformation)? null : capitalAssetInformation;
+    }
+
+    /**
+     * Sets the capitalAssetInformation attribute value.
+     * @param capitalAssetInformation The capitalAssetInformation to set.
+     */
+    @Deprecated
+    public void setCapitalAssetInformation(CapitalAssetInformation capitalAssetInformation) {
+        this.capitalAssetInformation = capitalAssetInformation;
+    }
+
+
+    /**
+     * 
+     * @see org.kuali.kfs.sys.document.GeneralLedgerPostingDocumentBase#handleRouteStatusChange()
+     */
+    @Override
+    public void handleRouteStatusChange() {
+        super.handleRouteStatusChange();        
+        this.getCapitalAssetManagementModuleService().deleteDocumentAssetLocks(this);        
+    }
+
+
+    /**
+     * 
+     * @see org.kuali.rice.kns.document.DocumentBase#postProcessSave(org.kuali.rice.kns.rule.event.KualiDocumentEvent)
+     */
+    @Override
+    public void postProcessSave(KualiDocumentEvent event) {
+        super.postProcessSave(event);
+        if (!(event instanceof SaveDocumentEvent)) { // don't lock until they route
+            String documentTypeName = SpringContext.getBean(DataDictionaryService.class).getDocumentTypeNameByClass(this.getClass());
+            this.getCapitalAssetManagementModuleService().generateCapitalAssetLock(this,documentTypeName);
+        }
+    }
+    
+    /**
+     * @return CapitalAssetManagementModuleService
+     */
+    private CapitalAssetManagementModuleService getCapitalAssetManagementModuleService() {
+        if (capitalAssetManagementModuleService == null) {
+            capitalAssetManagementModuleService = SpringContext.getBean(CapitalAssetManagementModuleService.class);
+        }
+        return capitalAssetManagementModuleService;
+    }  
+    
+    /**
+     * Answers true when invoice recurrence details are provided by the user
+     * 
+     * @see org.kuali.kfs.sys.document.FinancialSystemTransactionalDocumentBase#answerSplitNodeQuestion(java.lang.String)
+     */
+    @Override
+    public boolean answerSplitNodeQuestion(String nodeName) throws UnsupportedOperationException {
+        if (HAS_RECONCILER_NODE.equalsIgnoreCase(nodeName)) {
+            return hasReconciler();
+        }       
+        throw new UnsupportedOperationException("ProcurementCardDocument does not implement the answerSplitNodeQuestion method. Node name specified was: " + nodeName);
+    }
+   
+    /**
+     * 
+     * Determines whether this document has a Recurrence filled out enough to create an INVR doc.
+     * @return
+     */
+    private boolean hasReconciler() {
+        return (ObjectUtils.isNotNull(getProcurementCardHolder()) && 
+                ObjectUtils.isNotNull(getProcurementCardHolder().getProcurementCardHolderDetail()) &&
+                ObjectUtils.isNotNull(getProcurementCardHolder().getProcurementCardHolderDetail().getCardGroupId()));
+    }
+
+
+}

Property changes on: financial-system/kfs/trunk/work/src/edu/arizona/kfs/fp/document/ProcurementCardDocument.java
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+text/plain
\ No newline at end of property
